[{"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/index.js":"1","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/App.js":"2","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/layout/Landing.js":"3","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/layout/Navbar.js":"4","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/auth/Register.js":"5","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/auth/Login.js":"6","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/helper_files/validation_helper.js":"7","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/default_component.js":"8","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/helper_files/axios_token_setter.js":"9","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/recruiter_dashboard.js":"10","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/add_listing.js":"11","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/date_time_comp.js":"12","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/all_listings.js":"13","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/apply_job.js":"14","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/my_applications.js":"15","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/my_listings.js":"16","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/ListingData.js":"17","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/my_employees.js":"18","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/notification.js":"19","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/applicant_dashboard.js":"20","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/edit_profile.js":"21","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/edit_profile_recruiter.js":"22","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/verify_access.js":"23"},{"size":353,"mtime":1611243505577,"results":"24","hashOfConfig":"25"},{"size":9908,"mtime":1611678654474,"results":"26","hashOfConfig":"25"},{"size":739,"mtime":1611491557996,"results":"27","hashOfConfig":"25"},{"size":3645,"mtime":1611492408135,"results":"28","hashOfConfig":"25"},{"size":18040,"mtime":1611673612833,"results":"29","hashOfConfig":"25"},{"size":5452,"mtime":1611674072938,"results":"30","hashOfConfig":"25"},{"size":1063,"mtime":1611048276415,"results":"31","hashOfConfig":"25"},{"size":222,"mtime":1611678834952,"results":"32","hashOfConfig":"25"},{"size":501,"mtime":1610982826712,"results":"33","hashOfConfig":"25"},{"size":971,"mtime":1611488372896,"results":"34","hashOfConfig":"25"},{"size":15973,"mtime":1611505071590,"results":"35","hashOfConfig":"25"},{"size":931,"mtime":1611031078281,"results":"36","hashOfConfig":"25"},{"size":23755,"mtime":1611647918261,"results":"37","hashOfConfig":"25"},{"size":5885,"mtime":1611514902598,"results":"38","hashOfConfig":"25"},{"size":13066,"mtime":1611681798914,"results":"39","hashOfConfig":"25"},{"size":22595,"mtime":1611677091218,"results":"40","hashOfConfig":"25"},{"size":19122,"mtime":1611680536255,"results":"41","hashOfConfig":"25"},{"size":17106,"mtime":1611642614243,"results":"42","hashOfConfig":"25"},{"size":567,"mtime":1611434008641,"results":"43","hashOfConfig":"25"},{"size":880,"mtime":1611488484827,"results":"44","hashOfConfig":"25"},{"size":24637,"mtime":1611668781408,"results":"45","hashOfConfig":"25"},{"size":12424,"mtime":1611502066491,"results":"46","hashOfConfig":"25"},{"size":793,"mtime":1611675708160,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"sgmxk6",{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/index.js",[],["104","105"],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/App.js",["106","107","108","109","110","111","112"],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/layout/Landing.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/layout/Navbar.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/auth/Register.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/auth/Login.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/helper_files/validation_helper.js",["113"],"\nconst is_valid_email = (mail) => {\n    if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(mail)) {\n        return (true);\n    }\n    return (false);\n}\n\nconst get_pos_integer = (num) => {\n    let tmp_str = (num.replace(/\\D+/g, \"\"));\n    if (tmp_str === \"\") {\n        return \"\";\n    }\n    else {\n        return Number(tmp_str);\n    }\n\n}\n\nconst is_valid_phone_num = (v) => {\n    var re = /^\\d{10}$/;\n    return (v == null || v.trim().length < 1) || re.test(v)\n}\n\n\nfunction get_iso_date_str_from_obj(d) {\n    function pad(n) { return n < 10 ? '0' + n : n }\n    let str_got = d.getUTCFullYear() + '-'\n        + pad(d.getUTCMonth() + 1) + '-'\n        + pad(d.getUTCDate()) + 'T'\n        + pad(d.getUTCHours()) + ':'\n        + pad(d.getUTCMinutes());\n    console.log(\"Retuerning \", str_got);\n    return str_got;\n}\n\n// var date = new Date();\n// var currentISODateTime = ISODateString(date);\n// var ISODateTimeToCompareWith = marker.timestamp;\n\nexport default { is_valid_email, is_valid_phone_num, get_pos_integer, get_iso_date_str_from_obj };","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/default_component.js",["114","115","116"],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/helper_files/axios_token_setter.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/recruiter_dashboard.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/add_listing.js",["117","118","119","120","121","122","123","124","125"],"import React, { Fragment, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Button } from 'react-bootstrap';\nimport Validate_helper from \"../../helper_files/validation_helper\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DateAndTimePickers from \"./../date_time_comp\"\nconst ErrorNotification = require(\"../notification\").Error_notification;\nconst SuccessNotification = require(\"../notification\").Success_notification;\n\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n        <div className=\"error\" style={{ color: 'red' }}>\n            Error which occurred is : {message}\n        </div>\n    )\n}\n\n\n/*\nThings needed, \n//title, \n//max_applications : positive integer\n//num_slots : positive integer\n//date of posting : automated\n//date of deadline\n//reqd_skills\n//job duration, integer between 0 and 6\n//salary: positive integer\n//job_type : enum \n*/\n\n\nconst Add_listing = (props) => {\n\n    const [errorMessage, setErrorMessage] = useState([]);\n\n\n    const [error_messages_arr, set_error_messages_arr] = useState([]);     //success messages array\n    const [success_messages_arr, set_success_messages_arr] = useState([]);\n\n    const default_form_fields = {\n        title: '',\n        max_applications: '',\n        num_slots: \"\",\n        reqd_skills: [],\n        job_duration: \"\",\n        salary: \"\",\n        job_type: \"full_time\",\n        curr_skill: \"\",\n        date_of_posting: \"\",\n        date_of_deadline: \"2021-05-24T10:30\"\n    };\n\n\n    const [formData, setFormData] = useState({ ...default_form_fields });\n\n    const { title, max_applications, num_slots, reqd_skills, job_duration, salary, job_type, curr_skill, date_of_deadline, date_of_posting } = formData;\n\n    ///////////////////////////////////////////////////////////\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        let current_dts = new Date();;\n        let deadline_str = date_of_deadline + \":59\";\n        let deadline_dts = new Date(deadline_str);\n        let time_diff = deadline_dts - current_dts;\n        console.log(\"Time diff is \", time_diff)\n        console.log(\"deadline dts obj is \", deadline_dts);\n        console.log(\"Current dts obj is \", current_dts);\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n        if (time_diff <= 0) {\n            tmp_error_arr.push(\"Deadline date and time cannot be in the past\");\n            alert(\"Deadline date and time cannot be in the past\");\n            //return;\n        }\n        let next_val_to_use = Validate_helper.get_iso_date_str_from_obj(deadline_dts);\n        let val_to_use = Validate_helper.get_iso_date_str_from_obj(current_dts);\n        console.log(\"val to use is \", val_to_use);\n        console.log(\"NExt val to use is \", next_val_to_use);\n        //https://stackoverflow.com/questions/54069253/usestate-set-method-not-reflecting-change-immediately\n        let form_actually_submit = {\n            ...formData,\n            \"date_of_deadline\": next_val_to_use,\n            \"date_of_posting\": val_to_use\n        };\n        console.log(\"Prelim\", form_actually_submit);\n\n        // setFormData({\n        //     ...formData,\n        // });\n        // console.log(\"form trying to submit is \", formData);\n\n        //set current submission date obj\n        //add seconds to deadline and convert it into date obj\n        //check validity via data objs\n        //set submission time for form\n        //submit everything\n\n\n\n        if (tmp_error_arr.length === 0) {\n            console.log(form_actually_submit);\n            alert('You have submitted the form.');\n            try {\n                let baseUrl;\n                // if (user_type === \"type_r\") {\n                //     baseUrl = \"http://localhost:5000/api/recruiters/listings/add\";\n                // }\n                // else {\n                //     baseUrl = \"http://localhost:5000/api/users/applicant\";\n                // }\n                baseUrl = \"http://localhost:5000/api/recruiters/listings/add\";\n\n                const response = await axios.post(baseUrl, form_actually_submit);\n                console.log(\"Axios response is \", response);\n                tmp_success_arr.push(\"Listing added successfully\");\n                set_success_messages_arr(tmp_success_arr);\n                setFormData({...default_form_fields});\n\n\n                //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n                setTimeout(() => {\n                    set_success_messages_arr([])\n                }, 5000);\n            }\n            catch (error) {\n                //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                console.log(\"Error obj is \", error);\n                if (error.response) {\n                    /*\n                     * The request was made and the server responded with a\n                     * status code that falls out of the range of 2xx\n                     */\n                    if (error.response.data) {\n                        console.log(error.response.data.errors);\n                        error.response.data.errors.map((e) => {\n                            tmp_error_arr.push(e.msg);\n                            console.log(\"debug e is \", e);\n                            return e;\n                        });\n                    }\n                    else {\n                        tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                        console.log(\"There seems to have been a network error\");\n                    }\n                } else if (error.request) {\n                    /*\n                     * The request was made but no response was received, `error.request`\n                     * is an instance of XMLHttpRequest in the browser and an instance\n                     * of http.ClientRequest in Node.js\n                     */\n                    tmp_error_arr.push(error.message);\n\n                    console.log(\"2 error->\", error.message);\n                } else {\n                    // Something happened in setting up the request and triggered an Error\n                    console.log('e Error is ', error.message);\n                }\n\n            }\n        }\n\n        set_error_messages_arr(tmp_error_arr);\n\n        //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n        setTimeout(() => {\n            set_error_messages_arr([])\n        }, 5000);\n\n    };\n\n    ////////////////////////////////////////////////////////////////\n    // Takes care of handling change in inputs\n    const onChange = e => {\n        const numeric_fields = [\"max_applications\", \"num_slots\", \"job_duration\", \"salary\"];\n        let value_to_set = e.target.value;\n        console.log(typeof value_to_set);\n        if (numeric_fields.includes(e.target.name)) {\n            if (value_to_set !== \"\") {\n                value_to_set = Validate_helper.get_pos_integer(value_to_set);\n                if (e.target.name === \"job_duration\") {\n                    if (value_to_set !== \"\" && value_to_set > 6) {\n                        value_to_set = \"\";\n                        alert(\"max value of duration cannot exceed 6 months\");\n                    }\n                }\n                if (e.target.name === \"max_applications\" || e.target.name === \"num_slots\") {\n                    if (value_to_set !== \"\" && value_to_set === 0) {\n                        value_to_set = \"\";\n                        alert(\"Zero not allowed here. If you want a zero here, why even post the listing ????\");\n                    }\n                }\n\n            }\n\n\n\n        }\n        console.log(\"Setter \", e.target.name, \": \", value_to_set);\n        setFormData({ ...formData, [e.target.name]: value_to_set });\n    }\n    /////////////////////////////////////////////////////////\n\n    const add_skill = () => {\n        console.log(\"trying to add skill as \", curr_skill);\n        if (curr_skill.length < 1) {\n            alert(\"Skill foeld must have atleast one character\");\n            return;\n        }\n        //check if skill not already there, then add skill\n        let skill_to_add = curr_skill;\n        if (!reqd_skills.includes(skill_to_add)) {\n            let tmp_list = reqd_skills.map((s) => (s));\n            tmp_list.push(skill_to_add);\n            setFormData({ ...formData, \"curr_skill\": \"\", \"reqd_skills\": tmp_list });\n\n        }\n        else {\n            setFormData({ ...formData, \"curr_skill\": \"\" });\n        }\n\n    }\n\n    const delete_skill = (skill_to_delete) => {\n        console.log(\"trying to delete skill : \", skill_to_delete);\n\n        let tmp_list = reqd_skills.filter((s) => (s !== skill_to_delete));\n        setFormData({ ...formData, \"reqd_skills\": tmp_list });\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // maxLength=\"250\"\n    return (\n        <Fragment>\n            <h1 className='large text-primary'>Add New Listing</h1>\n            <p>\n                <b>Enter details</b>\n            </p>\n\n            {error_messages_arr.map((e) => (<ErrorNotification key={e} message={e} />))}\n\n\n\n            <form id=\"registration_form\" className='form' onSubmit={e => onSubmit(e)}>\n\n\n                <div className='form-group'>\n                    <label htmlFor=\"f1\">Job Title</label>\n\n                    <input\n                        type='title'\n                        placeholder='Enter JOB title'\n                        name='title'\n                        id=\"f1\"\n                        className=\"form-control\"\n                        value={title}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n\n                {/* //////////////////////////////////////////////////////// */}\n\n                <div className='form-group'>\n                    <label htmlFor=\"f2\">Number of total slots</label>\n\n                    <input\n                        type='text'\n                        placeholder='(Non-zero) Enter maximum number of SLOTS THERE'\n                        name='num_slots'\n                        id=\"f2\"\n                        className=\"form-control\"\n                        value={num_slots}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                {/* ////////////////////////////////////////////////////////// */}\n                <div className='form-group'>\n                    <label htmlFor=\"f3\">Total number of applications submissible</label>\n\n                    <input\n                        type='text'\n                        placeholder='(Non-zero) Enter maximum number of APPLICATIONS'\n                        // placeholder='(Non-zero) Enter maximum number of SLOTS THERE'\n                        name='max_applications'\n                        id=\"f3\"\n                        className=\"form-control\"\n                        value={max_applications}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                {/* ////////////////////////////////////////////////////////// */}\n                <div className='form-group'>\n                    <label htmlFor=\"f4\">Job Type</label>\n\n                    <select id=\"comboA\" id=\"f4\"\n                        className=\"form-control\"\n                        name=\"job_type\" onChange={e => onChange(e)} value={job_type}>\n                        {/* <option value=\"\">Select combo</option> */}\n                        <option value=\"full_time\">full_time</option>\n                        <option value=\"part_time\">Part Time</option>\n                        <option value=\"work_from_home\">Work From Home</option>\n                    </select>\n                </div>\n                {/* ///////////////////////////////////////////////////////////// */}\n                <div className='form-group'>\n                    <label htmlFor=\"f5\">Job Duration (0-6 months only)</label>\n\n                    <input\n                        type='text'\n                        placeholder='Enter job duration in months (from 0 to 6 only)'\n                        name='job_duration'\n                        value={job_duration}\n                        id=\"f5\"\n                        className=\"form-control\"\n                        onChange={e => onChange(e)}\n                        maxLength=\"1\" //to keep number single digit\n                        required\n                    />\n                </div>\n                {/* ////////////////////////////////////////////////////////// */}\n                <div className='form-group'>\n                    <label htmlFor=\"f6\">Offered Salary</label>\n\n                    <input\n                        type='text'\n                        placeholder='Enter salary'\n                        name='salary'\n                        id=\"f6\"\n                        className=\"form-control\"\n                        value={salary}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                {/* ////////////////////////////////////////////////////////// */}\n\n\n                <div className='form-group'>\n                    <label htmlFor=\"f7\">Preferred Skills</label>\n\n\n                    <table className=\"table table-sm\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">Skill Name</th>\n                                <th scope=\"col\">Possible Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {reqd_skills.map((skill_there, idx) => {\n                                return (\n                                    <tr key={skill_there}>\n                                        <th scope=\"row\">{idx + 1}</th>\n                                        <td>{skill_there}</td>\n\n                                        <td><button type=\"button\" className=\"btn btn-danger btn-sm\" onClick={() => delete_skill(skill_there)}>Delete this skill</button></td>\n\n                                    </tr>);\n                            })}\n\n\n                        </tbody>\n                    </table>\n\n\n\n\n                    <input\n                        type='text'\n                        id=\"f7\"\n                        className=\"form-control\"\n                        placeholder='Enter a language to add to list of total list of languages you DEMAND FROM AN APPLICANT'\n                        name='curr_skill'\n                        value={curr_skill}\n                        onChange={e => onChange(e)}\n                    />\n                    <button type=\"button\" className='btn btn-dark btn-sm' onClick={() => add_skill()}>ADD this skill</button>\n                </div>\n\n                {/* //////////////////////////////////////////////////////////////////////////////s */}\n                <div className='form-group'>\n                    <label htmlFor=\"f8\">Last date and time for application</label>\n                    <br />\n                    <DateAndTimePickers id=\"f8\" onChange={onChange} expected_name={\"date_of_deadline\"} sent_value={date_of_deadline} />\n                </div>\n\n\n\n\n                <br></br>\n\n\n                {success_messages_arr.map((e) => (<SuccessNotification key={e} message={e} />))}\n\n\n                <input type='submit' className='btn btn-primary btn-lg' value='Add listing' />\n            </form>\n\n\n        </Fragment >\n    );\n}\n\nexport default Add_listing;","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/date_time_comp.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/all_listings.js",["126","127","128","129","130","131"],"import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button } from 'react-bootstrap';\nimport Validate_helper from \"../../helper_files/validation_helper\";\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nconst ErrorNotification = require(\"../notification\").Error_notification;\nconst SuccessNotification = require(\"../notification\").Success_notification;\n\n\n/*\n\nThis seems to have all jobs whose (isDeleted==false) and (isDeadline===”NOT PASSED”)\n\nThe button to apply is active only if \n(Slots==”NOT FULL” && “APPLICATIONS”==NOT FULL && “Person does not have 10 open applications” && Person === NOT ALREADY RECRUITED) [3 types of button: Applied, Apply, Full]\n\nActions: Apply to jobs\nOn application, reduce his number of open applications, increase filled applications of listing, append his stuff to the total applications array of the job etc.\n\nShould have a filter section like e-commerce websites, with following filters\nprovided ​[5 marks]​:\n○ Job Type ​- Should be able to select and filter from Full-time / Part-time / Work\nfrom Home.\n○ Salary​ - Range: filter from X to Y range. You can have two textboxes for X and Y\nor you can also have a Slider with 2 pins for filtering.\n○ Duration​ - Dropdown, with each option filtering for job listings with duration\nstrictly lesser​ than itself. Entries are in increments of a month from 1-7.\n\n*/\n\n// component_to_use={<AllListings email_id={login_details.user_email_id} attemptLogout={logout} />}\nconst default_filter_fields = {\n    desired_job_duration: 7,\n    desired_min_salary: 0,\n    desired_max_salary: 1000000000000000,\n    desired_job_type: \"all\"\n\n};\nconst AllListings = (props) => {\n\n    const [jobs_master, set_jobs_master] = useState([]);\n    const [jobs_wanted, set_jobs_wanted] = useState([]);\n    const [user_details, set_user_details] = useState({});\n\n    //State for sort, filter\n    const [filter_data, set_filter_data] = useState(default_filter_fields);\n    const [curr_filter_data, set_curr_filter_data] = useState(default_filter_fields);\n    const [search_term, set_search_term] = useState(\"\");\n\n    //Master array containg all job listings [intially empty]\n\n    const [error_messages_arr, set_error_messages_arr] = useState([]);     //success messages array\n    const [success_messages_arr, set_success_messages_arr] = useState([]);\n\n    //user details : fields needed, email id, number of open applications, already recruited, \n\n    //Fetch master array using UseEffect Component did Mount\n    //WHile query, populate recruiter, get only selected fields\n    const get_rating = (num_instances, tot_sum) => {\n        if (num_instances === 0) {\n            return 0;\n        }\n        return tot_sum / num_instances;\n    }\n    const onChange = e => {\n        const numeric_fields = [\"desired_min_salary\", \"desired_max_salary\"];\n        let value_to_set = e.target.value;\n        // console.log(typeof value_to_set);\n        if (numeric_fields.includes(e.target.name)) {\n            if (value_to_set !== \"\") {\n                value_to_set = Validate_helper.get_pos_integer(value_to_set);\n            }\n        }\n\n        console.log(\"Setter \", e.target.name, \": \", value_to_set);\n        set_curr_filter_data({ ...curr_filter_data, [e.target.name]: value_to_set });\n    }\n\n    const on_new_search_term = e => {\n        set_search_term(e.target.value);\n    }\n\n    useEffect(() => {\n        let tmp_error_arr = [];\n        console.log('inside use-effect of All listings.js');\n\n\n        let baseUrl_a = \"http://localhost:5000/api/users/applicant/get_applicant_details\";\n\n\n        axios.get(baseUrl_a, { params: { email_id: props.email_id } })\n            .then((response) => {\n                console.log(\"2-> Axios response is \", response.data);\n                set_user_details(response.data);\n                ////////////////////////////////////////////////////////////////////////////////////\n                let baseUrl = \"http://localhost:5000/api/recruiters/listings/get_all_jobs\";\n\n                axios.get(baseUrl)\n                    .then((response) => {\n                        console.log(\"Axios response is \", response.data);\n                        let tmp_jobs_wanted = [...response.data];\n                        let init_len = tmp_jobs_wanted.length;\n                        for (let i = 0; i < init_len; i++) {\n                            tmp_jobs_wanted[i] = { ...tmp_jobs_wanted[i], \"actual_rating\": get_rating(tmp_jobs_wanted[i].num_ratings, tmp_jobs_wanted[i].ratings_sum) };\n                        }\n                        set_jobs_master(tmp_jobs_wanted);\n                    })\n                    .catch((error) => {\n                        //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                        console.log(\"Error obj is \", error);\n                        if (error.response) {\n                            /*\n                             * The request was made and the server responded with a\n                             * status code that falls out of the range of 2xx\n                             */\n                            if (error.response.data) {\n                                console.log(error.response.data.errors);\n                                error.response.data.errors.map((e) => {\n                                    tmp_error_arr.push(e.msg);\n                                    console.log(\"debug e is \", e);\n                                    // return e;\n                                });\n                            }\n                            else {\n                                tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                                console.log(\"There seems to have been a network error\");\n                            }\n                        }\n                        else if (error.request) {\n                            /*\n                             * The request was made but no response was received, `error.request`\n                             * is an instance of XMLHttpRequest in the browser and an instance\n                             * of http.ClientRequest in Node.js\n                             */\n                            tmp_error_arr.push(error.message);\n\n                            console.log(\"2 error->\", error.message);\n                        }\n                        else {\n                            // Something happened in setting up the request and triggered an Error\n                            console.log('e Error is ', error.message);\n                        }\n\n                    });\n\n\n                /////////////////////////////////////////////////////////////////\n            })\n            .catch((error) => {\n                //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                console.log(\"Error obj is \", error);\n                if (error.response) {\n                    /*\n                     * The request was made and the server responded with a\n                     * status code that falls out of the range of 2xx\n                     */\n                    if (error.response.data) {\n                        console.log(error.response.data.errors);\n                        error.response.data.errors.map((e) => {\n                            tmp_error_arr.push(e.msg);\n                            console.log(\"debug e is \", e);\n                            //return e;\n                        });\n                    }\n                    else {\n                        tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                        console.log(\"There seems to have been a network error\");\n                    }\n                }\n                else if (error.request) {\n                    /*\n                     * The request was made but no response was received, `error.request`\n                     * is an instance of XMLHttpRequest in the browser and an instance\n                     * of http.ClientRequest in Node.js\n                     */\n                    tmp_error_arr.push(error.message);\n\n                    console.log(\"20 error->\", error.message);\n                }\n                else {\n                    // Something happened in setting up the request and triggered an Error\n                    console.log('e Error is ', error.message);\n                }\n                console.log(\"OUTSIDE CATCH IFs\");\n                console.log(\"PRELIM Error messages details are \", tmp_error_arr);\n\n\n            })\n            .finally(() => {\n                console.log(\"Error messages details are \", tmp_error_arr);\n                set_error_messages_arr(tmp_error_arr);\n\n                //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n                setTimeout(() => {\n                    set_error_messages_arr([])\n                }, 5000);\n            })\n\n\n    }, []);\n\n    useEffect(() => {\n        console.log('inside use-effect of to update wanted array');\n        let tmp_jobs_wanted = [...jobs_master];\n\n        set_jobs_wanted(tmp_jobs_wanted);\n        console.log(\"JOBS WANTED IS \", tmp_jobs_wanted);\n    }, [jobs_master]);\n\n\n\n    // Takes care of handling change in inputs\n    const sort_button_clicked = e => {\n        // console.log(typeof e.target.value);\n        console.log(e.target.id);\n        let tmp_jobs_wanted = [...jobs_master];\n        let chosen_func;\n\n        if (true) {\n            if (e.target.id === 'dur_a') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return x.job_duration - y.job_duration;\n                }\n            }\n            else if (e.target.id === 'dur_d') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return -(x.job_duration - y.job_duration);\n                }\n            }\n            else if (e.target.id === 'sal_a') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return x.salary - y.salary;\n                }\n            }\n            else if (e.target.id === 'sal_d') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return -(x.salary - y.salary);\n                }\n            }\n            else if (e.target.id === 'rat_a') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return x.actual_rating - y.actual_rating;\n                }\n\n            }\n            else if (e.target.id === 'rat_d') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return -(x.actual_rating - y.actual_rating);\n                }\n            }\n        }\n        tmp_jobs_wanted.sort(chosen_func);\n        set_jobs_wanted(tmp_jobs_wanted);\n\n\n    }\n\n    const on_apply_filter = async (e) => {\n        e.preventDefault();\n        let tmp_filter_data = { ...curr_filter_data };\n\n        //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n        //Filling defaults for empty fields\n        if (tmp_filter_data.desired_min_salary === \"\") {\n            tmp_filter_data.desired_min_salary = default_filter_fields.desired_min_salary;\n        }\n        if (tmp_filter_data.desired_max_salary === \"\") {\n            tmp_filter_data.desired_max_salary = default_filter_fields.desired_max_salary;\n        }\n        //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n\n        if (tmp_filter_data.desired_min_salary > tmp_filter_data.desired_max_salary) {\n            alert(\"Simple arithmetic. Min salary field cannot be greater than max salary field. Previous successful filter presists. \");\n            // set_curr_filter_data({ ...default_filter_fields });\n        }\n        else {\n            set_curr_filter_data({ ...tmp_filter_data });\n            set_filter_data({ ...curr_filter_data });\n        }\n\n    };\n\n    const is_listing_filtered = (curr_job) => {\n        if (curr_job.job_duration >= Number(filter_data.desired_job_duration)) {\n            return false;\n        }\n        if (curr_job.salary < filter_data.desired_min_salary || curr_job.salary > filter_data.desired_max_salary) {\n            return false;\n        }\n\n        if (filter_data.desired_job_type !== \"all\") {\n            if (curr_job.job_type !== filter_data.desired_job_type) {\n                return false;\n            }\n        }\n\n        if (curr_job.title.toLowerCase().indexOf(search_term.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    };\n\n    const get_button_status = (curr_job) => {\n\n        let ans = \"apply\";\n        let already_applied_job_ids = user_details.applications_submitted.map((s) => (s.job_id));\n\n        if (curr_job.are_apps_full === true || curr_job.are_slots_full === true) {\n            ans = \"full\";\n        }\n\n\n        if (user_details.num_open_applications === 10) {\n            ans = \"10_over\";\n        }\n\n        if (user_details.is_hired === true) {\n            ans = \"already_hired\";\n        }\n\n        if (already_applied_job_ids.includes(curr_job._id)) {\n            ans = \"applied\";\n        }\n        return ans;\n\n\n    }\n\n    const applied_btn_clicked = (curr_job) => {\n        console.log(\"HERE\");\n        if (user_details.num_open_applications === 10) {\n            alert(\"You already have 10 open applications\");\n        }\n\n        if (user_details.is_hired === true) {\n            alert(\"You are already a hired person. \");\n        }\n        alert(\"HELLO\");\n        window.location.href = (\"/applicant/apply/\" + curr_job._id);\n        // let history = useHistory();\n        // history.push(\"apply/\" + curr_job._id);\n\n\n    }\n\n    return (\n        <React.Fragment>\n            <h1>HELLO</h1>\n\n            {user_details.num_open_applications === 10 && (\n                <div className=\"alert alert-warning\" role=\"alert\">\n                    NOTE : You already have 10 open applications. You won't be able to apply for any more jobs.\n                </div>\n            )}\n\n            {user_details.is_hired === true && <div className=\"alert alert-warning\" role=\"alert\">\n                NOTE : You are already a hired person. You won't be able to apply for any more jobs.\n                </div>}\n\n\n            {/* Error div             Success div */}\n            {error_messages_arr.map((e) => (<ErrorNotification key={e} message={e} />))}\n            {success_messages_arr.map((e) => (<SuccessNotification key={e} message={e} />))}\n\n\n            <form id=\"SEARCH\" className='form'>\n\n                <h3>Search box</h3>\n                <div className='form-group'>\n                    <input\n                        type='text'\n                        placeholder='Search ...'\n                        id=\"f1\"\n                        className=\"form-control\"\n                        name='search_term'\n                        value={search_term}\n                        onChange={e => on_new_search_term(e)}\n                        required\n                    />\n                    {/* <button type=\"button\" class=\"btn btn-dark\" onClick={() => ()}>Dark</button> */}\n\n                </div>\n                <hr></hr>\n            </form>\n\n            <form id=\"registration_form\" className='form'>\n                <h3>Filter fields</h3>\n\n                <label htmlFor=\"f2\">Minimum salary range</label>\n\n                <div className='form-group'>\n                    <input\n                        type='text'\n                        placeholder='Enter min salary'\n                        name='desired_min_salary'\n                        id=\"f2\"\n                        className=\"form-control\"\n                        value={curr_filter_data.desired_min_salary}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                {/* ////////////////////////////////////////////////////////// */}\n                <div className='form-group'>\n                    <label htmlFor=\"f3\">Maximum salary range</label>\n\n                    <input\n                        type='text'\n                        placeholder='Enter max salary'\n                        // placeholder='(Non-zero) Enter maximum number of SLOTS THERE'\n                        name='desired_max_salary'\n                        id=\"f3\"\n                        className=\"form-control\"\n                        value={curr_filter_data.desired_max_salary}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n                {/* ////////////////////////////////////////////////////////// */}\n                <div className='form-group'>\n                    <label htmlFor=\"f4\">Desired Job Type</label>\n                    <select id=\"comboA\" name=\"desired_job_type\"\n                        id=\"f4\"\n                        className=\"form-control\"\n                        onChange={e => onChange(e)} value={curr_filter_data.desired_job_type}>\n                        {/* <option value=\"\">Select combo</option> */}\n                        <option value=\"all\">all</option>\n                        <option value=\"full_time\">full_time</option>\n                        <option value=\"part_time\">Part Time</option>\n                        <option value=\"work_from_home\">Work From Home</option>\n                    </select>\n                </div>\n                {/* ///////////////////////////////////////////////////////////// */}\n                <div className='form-group'>\n                    <label htmlFor=\"f2\">Enter Duration below which you can work</label>\n\n                    <select id=\"comboA\"\n                        id=\"f5\"\n                        className=\"form-control\"\n                        name=\"desired_job_duration\" onChange={e => onChange(e)} value={curr_filter_data.desired_job_duration}>\n                        {/* <option value=\"\">Select combo</option> */}\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option>\n                        <option value=\"7\">7</option>\n                    </select>\n                </div>\n                {/* ///////////////////////////////////////////////////////////// */}\n\n\n\n                <br></br>\n\n\n                <input type='submit' className='btn btn-dark' value='Apply filters' onClick={e => on_apply_filter(e)} />\n                <input type='submit' className='btn btn-outline-secondary' value='Remove Filters' onClick={(e) => {\n                    e.preventDefault();\n                    set_filter_data({ ...default_filter_fields });\n                    set_curr_filter_data({ ...default_filter_fields });\n                }} />\n\n                <hr></hr>\n            </form>\n\n\n            {/* sorting buttons\n             Sort option based on each Salary, Duration and Rating both ascending and descending\n            */}\n            <>\n                <h3>Sort options</h3>\n\n                <Button variant=\"primary\" size=\"sm\" id=\"sal_a\" onClick={(e) => (sort_button_clicked(e))}>Salary (ascending)</Button>{' '}\n                <Button variant=\"secondary\" size=\"sm\" id=\"sal_d\" onClick={(e) => (sort_button_clicked(e))}>Salary (Descending)</Button>{' '}\n                <Button variant=\"success\" size=\"sm\" id=\"dur_a\" onClick={(e) => (sort_button_clicked(e))}>Duration (ascending)</Button>{' '}\n                <Button variant=\"warning\" size=\"sm\" id=\"dur_d\" onClick={(e) => (sort_button_clicked(e))}>Duration (Descending)</Button>{' '}\n                <Button variant=\"danger\" size=\"sm\" id=\"rat_a\" onClick={(e) => (sort_button_clicked(e))}>Rating (ascending)</Button>\n                <Button variant=\"dark\" size=\"sm\" id=\"rat_d\" onClick={(e) => (sort_button_clicked(e))}>Rating (Descending)</Button>{' '}\n                <br></br>\n                <br></br>\n                <br></br>\n                <br></br>\n            </>\n\n\n            {/* viewing all listings in tabular format \n            \n            Each job listing should have fields like Title, Recruiter Name, Job Rating, Salary,\nDuration, Deadline of application displayed with an “Apply” button.*/\n            }\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>JOB TITLE</th>\n                        <th>Rcruiter Name</th>\n                        <th>JOB RATING</th>\n                        <th>Salary</th>\n                        <th>Duration</th>\n                        <th>Application deadline</th>\n                        <th>Action possible</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {/* <tr>\n                        <td>1</td>\n                        <td>Mark</td>\n                        <td>Otto</td>\n                        <td>@mdo</td>\n                    </tr> */}\n\n                    {jobs_wanted.map((curr_job) => {\n                        if (is_listing_filtered(curr_job)) {\n                            return (\n                                <tr key={curr_job._id}>\n                                    {/* {console.log(curr_job.actual_rating)} */}\n                                    <td key={curr_job._id + \"a\"}>{curr_job.title}</td>\n                                    <td key={curr_job._id + \"b\"}>{curr_job.employer_id.name}</td>\n                                    <td key={curr_job._id + \"c\"}>{curr_job.actual_rating}</td>\n                                    <td key={curr_job._id + \"d\"}>{curr_job.salary}</td>\n                                    <td key={curr_job._id + \"e\"}>{curr_job.job_duration}</td>\n                                    {/* //https://stackoverflow.com/questions/17333425/add-a-duration-to-a-moment-moment-js */}\n                                    <td key={curr_job._id + \"f\"}>{moment(curr_job.date_of_deadline).add(330, 'minutes').format('D MMM YYYY, h:mm:ss A')}</td>\n                                    <td key={curr_job._id + \"g\"}>\n\n\n                                        {/* //Takes care only if neither appied, nor full, nor disqualified */}\n                                        {((get_button_status(curr_job) !== \"applied\") && ((get_button_status(curr_job) !== \"full\"))) &&\n                                            <Button onClick={() => applied_btn_clicked(curr_job)} variant=\"success\" disabled={get_button_status(curr_job) !== \"apply\"}>APPLY</Button>}\n\n                                        {/* Takes care if already applied */}\n                                        {get_button_status(curr_job) === \"applied\" && <Button variant=\"primary\" disabled>Applied</Button>}\n\n                                        {/* Takes care if vacancy is full */}\n                                        {/* {true && <Button variant=\"primary\" onClick={() => { console.log(\"Applied clicked\") }}>Applied</Button>} */}\n                                        {get_button_status(curr_job) === \"full\" && <Button variant=\"danger\" disabled>Already Full</Button>}\n\n                                    </td>\n                                </tr>\n                            )\n                        }\n                        else {\n                            return null;\n                        }\n                    })\n                    }\n                </tbody>\n            </Table>\n\n        </React.Fragment>\n\n    )\n\n}\n\nexport default AllListings;","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/apply_job.js",["132","133"],"import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\nimport Validate_helper from \"../../helper_files/validation_helper\";\nconst ErrorNotification = require(\"../notification\").Error_notification;\nconst SuccessNotification = require(\"../notification\").Success_notification;\n\n\n\n// On application, reduce his number of open applications, increase filled applications of listings, append his stuff to the total applications array of the job etc.\n\nconst Apply_job = (props_sent) => {\n\n    const [error_messages_arr, set_error_messages_arr] = useState([]);     //success messages array\n    const [success_messages_arr, set_success_messages_arr] = useState([]);\n\n\n    const [formData, setFormData] = useState({\n\n        job_id: props_sent.pursuing_job_id,\n        sop: \"\",\n        user_email_id: props_sent.email_id\n    });\n    // Takes care of handling change in inputs\n    const onChange = e => {\n        let val_set = e.target.value;\n        let words = val_set.split(/\\s+/);\n        let maxWords = 250;\n        let numWords = words.length;\n        if (numWords > maxWords) {\n            return;\n        }\n        console.log(\"Setter \", e.target.name, \": \", e.target.value);\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    }\n\n    const onSubmit = async () => {\n        // e.preventDefault();\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n\n        if (tmp_error_arr.length === 0) {\n            let current_dts = new Date();;\n            let val_to_use = Validate_helper.get_iso_date_str_from_obj(current_dts);\n            let form_actually_submit = {\n                ...formData,\n                \"date_of_application\": val_to_use\n            };\n\n            console.log(form_actually_submit);\n            //alert('You have submitted the form.');\n            try {\n                let baseUrl = \"http://localhost:5000/api/users/applicant/post_application\";\n\n\n                const response = await axios.post(baseUrl, form_actually_submit);\n                console.log(\"Axios response is \", response);\n                //tmp_success_arr.push(\"SUCCESSFUL Submission\");\n                console.log(\"SUCCESS\");\n                //set_success_messages_arr(tmp_success_arr);\n                alert(\"SOP submitted\");\n\n                setTimeout(() => {\n                    window.location.href = (\"/applicant/all_listings\");\n                }, 1000);\n\n\n            }\n            catch (error) {\n                //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                console.log(\"Error obj is \", error);\n                if (error.response) {\n                    /*\n                     * The request was made and the server responded with a\n                     * status code that falls out of the range of 2xx\n                     */\n                    if (error.response.data) {\n                        console.log(error.response.data.errors);\n                        error.response.data.errors.map((e) => {\n                            tmp_error_arr.push(e.msg);\n                            console.log(\"debug e is \", e);\n                            return e;\n                        });\n                    }\n                    else {\n                        tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                        console.log(\"There seems to have been a network error\");\n                    }\n                } else if (error.request) {\n                    /*\n                     * The request was made but no response was received, `error.request`\n                     * is an instance of XMLHttpRequest in the browser and an instance\n                     * of http.ClientRequest in Node.js\n                     */\n                    tmp_error_arr.push(error.message);\n\n                    console.log(\"2 error->\", error.message);\n                } else {\n                    // Something happened in setting up the request and triggered an Error\n                    console.log('e Error is ', error.message);\n                }\n\n            }\n            set_error_messages_arr(tmp_error_arr);\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_error_messages_arr([])\n            }, 5000);\n        }\n\n\n    };\n    return (\n        <React.Fragment>\n\n            {/* Error div             Success div */}\n            {error_messages_arr.map((e) => (<ErrorNotification key={e} message={e} />))}\n            {success_messages_arr.map((e) => (<SuccessNotification key={e} message={e} />))}\n\n            {/* // https://stackoverflow.com/a/45599016/6427607 */}\n            <h1>{console.log(props_sent)}</h1>\n            <h2>{ }</h2>\n\n\n            <div className='form-group'>\n                <label htmlFor=\"f2\"><h4>Fill SOP (max length: 250 words)</h4></label>\n\n                <textarea\n                    form=\"\"\n                    name=\"sop\"\n                    rows=\"10\"\n                    cols=\"80\"\n                    id=\"f2\"\n                    className=\"form-control\"\n                    onChange={e => onChange(e)}\n                    value={formData.sop}\n                    style={{ fontSize: 20 }}\n                />\n\n            </div>\n\n            <div className=\"mb-2\">\n                <Button variant=\"primary\" size=\"lg\" onClick={() => { onSubmit() }}>\n                    Submit SOP\n                            </Button>\n            </div>\n\n            {/* //set up a bio field */}\n\n\n            {/* //display job details */}\n\n\n            {/* //error handler displayer */}\n\n\n            {/* //submit button */}\n\n            {/* //post to a route  */}\n\n\n        </React.Fragment>\n    )\n}\n\n\nexport default Apply_job;\n","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/my_applications.js",["134","135","136","137","138","139","140","141"],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/my_listings.js",["142","143"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button } from 'react-bootstrap';\nimport Alert from 'react-bootstrap/Alert';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nimport DateAndTimePickers from \"../date_time_comp\";\nimport Validate_helper from \"../../helper_files/validation_helper\";\nconst ErrorNotification = require(\"../notification\").Error_notification;\nconst SuccessNotification = require(\"../notification\").Success_notification;\n\n\n\n/*\nThings needed, =>username (email_id) for displaying name, (attemptLogout) logout function, */\n/*\nFields I would need:\nall job details,\n//rest can in the backend it seems\n*/\n\nconst My_listings = (props) => {\n\n    //variable to keep track of all current jobs\n    const [jobs_master, set_jobs_master] = useState([]);\n\n\n    //a form to edit jobs\n    const [edit_job_form, set_edit_job_form] = useState({\n        updated_job_obj: null,\n        updated_max_applications: '',\n        updated_num_slots: \"\",\n        updated_date_of_deadline: \"2021-05-24T10:30\"\n    });\n\n    //variable whether form is visible or not\n    const [track_edit_job, set_track_edit_job] = useState(false);\n\n\n\n    //error messages array\n    const [error_messages_arr, set_error_messages_arr] = useState([]);\n\n\n    //success messages array\n    const [success_messages_arr, set_success_messages_arr] = useState([]);\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        let current_dts = new Date();;\n        let deadline_str = edit_job_form.updated_date_of_deadline + \":59\";\n        let deadline_dts = new Date(deadline_str);\n        let time_diff = deadline_dts - current_dts;\n        console.log(\"Time diff is \", time_diff)\n        console.log(\"deadline dts obj is \", deadline_dts);\n        console.log(\"Current dts obj is \", current_dts);\n        if (time_diff <= 0) {\n            // tmp_error_arr.push(\"Deadline date and time cannot be in the past\");\n            alert(\"Deadline date and time cannot be in the past\");\n            return;\n        }\n        let next_val_to_use = Validate_helper.get_iso_date_str_from_obj(deadline_dts);\n        let val_to_use = Validate_helper.get_iso_date_str_from_obj(current_dts);\n        console.log(\"val to use is \", val_to_use);\n        console.log(\"NExt val to use is \", next_val_to_use);\n        //https://stackoverflow.com/questions/54069253/usestate-set-method-not-reflecting-change-immediately\n        let form_actually_submit = {\n            ...edit_job_form,\n            \"updated_date_of_deadline\": next_val_to_use\n        };\n        console.log(\"Prelim\", form_actually_submit);\n\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n\n        let already_approved = edit_job_form.updated_job_obj.applications_approved.length;\n        let already_applied = edit_job_form.updated_job_obj.applications_received.length;\n        console.log(\"already approved is \", already_approved);\n        console.log(\"already applied is \", already_applied);\n        console.log(form_actually_submit.updated_max_applications);\n        console.log(form_actually_submit.updated_num_slots);\n        if (form_actually_submit.updated_max_applications < already_applied) {\n            alert(\"More people have already applied than the current limit you are trying to set. Refill edit fields.\");\n            return;\n        }\n        if (form_actually_submit.updated_num_slots < already_approved) {\n            alert(\"More people have already been ACCEPTED than the current limit you are trying to set. Refill edit fields.\");\n            return;\n        }\n\n        form_actually_submit = { ...form_actually_submit, \"job_id\": form_actually_submit.updated_job_obj._id };\n        console.log(form_actually_submit);\n        alert('You have submitted the form.');\n        try {\n            let baseUrl = \"http://localhost:5000/api/recruiters/listings/update_listing\";\n\n            const response = await axios.post(baseUrl, form_actually_submit);\n\n\n            //////////////////////////////////////////////////////////////\n            // ON Success, display apt message and hide the form again, also refetch jobs       \n\n            console.log(\"Axios response is \", response);\n            tmp_success_arr.push(\"Updation successful\");\n            set_success_messages_arr(tmp_success_arr);\n            set_track_edit_job(false);\n            update_table_listings();\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_success_messages_arr([])\n            }, 5000);\n        }\n        catch (error) {\n            //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n            console.log(\"Error obj is \", error);\n            if (error.response) {\n                /*\n                 * The request was made and the server responded with a\n                 * status code that falls out of the range of 2xx\n                 */\n                if (error.response.data) {\n                    console.log(error.response.data.errors);\n                    error.response.data.errors.map((e) => {\n                        tmp_error_arr.push(e.msg);\n                        console.log(\"debug e is \", e);\n                        return e;\n                    });\n                }\n                else {\n                    tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                    console.log(\"There seems to have been a network error\");\n                }\n            } else if (error.request) {\n                /*\n                 * The request was made but no response was received, `error.request`\n                 * is an instance of XMLHttpRequest in the browser and an instance\n                 * of http.ClientRequest in Node.js\n                 */\n                tmp_error_arr.push(error.message);\n\n                console.log(\"2 error->\", error.message);\n            } else {\n                // Something happened in setting up the request and triggered an Error\n                console.log('e Error is ', error.message);\n            }\n\n            set_error_messages_arr(tmp_error_arr);\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_error_messages_arr([])\n            }, 5000);\n\n        }\n    };\n\n\n    ////////////////////////////////////////////////////////////////\n    // Takes care of handling change in inputs\n    const onChange = e => {\n        const numeric_fields = [\"updated_max_applications\", \"updated_num_slots\"];\n        let value_to_set = e.target.value;\n        console.log(typeof value_to_set);\n        if (numeric_fields.includes(e.target.name)) {\n            if (value_to_set !== \"\") {\n                value_to_set = Validate_helper.get_pos_integer(value_to_set);\n\n                if (e.target.name === \"updated_max_applications\" || e.target.name === \"updated_num_slots\") {\n                    if (value_to_set !== \"\" && value_to_set === 0) {\n                        value_to_set = \"\";\n                        alert(\"Zero not allowed here. If you want a zero here, why even post the listing ????\");\n                    }\n                }\n\n            }\n        }\n        console.log(\"Setter \", e.target.name, \": \", value_to_set);\n        set_edit_job_form({ ...edit_job_form, [e.target.name]: value_to_set });\n    }\n    /////////////////////////////////////////////////////////\n\n    const update_table_listings = () => {\n        let tmp_error_arr = [];\n        let baseUrl = \"http://localhost:5000/api/recruiters/listings/my_listings\";\n\n        axios.get(baseUrl, { params: { email_id: props.email_id } }).then((response) => {\n            console.log(\"Axios response is \", response.data);\n            let tmp_jobs_posted = [...response.data];\n            set_jobs_master(tmp_jobs_posted);\n        }).catch((error) => {\n            //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n            console.log(\"Error obj is \", error);\n            if (error.response) {\n                /*\n                 * The request was made and the server responded with a\n                 * status code that falls out of the range of 2xx\n                 */\n                if (error.response.data) {\n                    console.log(error.response.data.errors);\n                    error.response.data.errors.map((e) => {\n                        tmp_error_arr.push(e.msg);\n                        console.log(\"debug e is \", e);\n                        return e;\n                    });\n                }\n                else {\n                    tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                    console.log(\"There seems to have been a network error\");\n                }\n            }\n            else if (error.request) {\n                /*\n                 * The request was made but no response was received, `error.request`\n                 * is an instance of XMLHttpRequest in the browser and an instance\n                 * of http.ClientRequest in Node.js\n                 */\n                tmp_error_arr.push(error.message);\n\n                console.log(\"2 error->\", error.message);\n            }\n            else {\n                // Something happened in setting up the request and triggered an Error\n                console.log('e Error is ', error.message);\n            }\n            set_error_messages_arr(tmp_error_arr);\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_error_messages_arr([])\n            }, 5000);\n        });\n    }\n    //useEffect : fetch all jobs\n    useEffect(() => {\n        console.log('inside use-effect of MY listings.js');\n        update_table_listings();\n    }, []);\n\n\n    //OnClicking edit button, update form variables, make form watch variable as true only.\n\n\n    //Cancel edit button making it false\n    const edit_clicked = (curr_job) => {\n        console.log(\"EDIT CLICKED\");\n        set_edit_job_form({ ...edit_job_form, \"updated_job_obj\": { ...curr_job } });\n        set_track_edit_job(true);\n    }\n\n    const delete_clicked = (curr_job) => {\n\n        console.log(\"Delete clicked\");\n        let result = window.confirm(\"Want to delete?\");\n        if (result) {\n            let tmp_error_arr = [];\n            let tmp_success_arr = [];\n\n            let baseUrl = \"http://localhost:5000/api/recruiters/listings/delete_listing\";\n\n            ////https://stackoverflow.com/a/53263784/6427607\n\n\n            axios.delete(baseUrl, { data: { ...curr_job } }).then((response) => {\n                console.log(\"Axios response is \", response.data);\n                tmp_success_arr.push(\"DELETION successful\");\n                set_success_messages_arr(tmp_success_arr);\n                // set_track_edit_job(false);\n                update_table_listings();\n\n                //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n                setTimeout(() => {\n                    set_success_messages_arr([])\n                }, 5000);\n\n            }).catch((error) => {\n                //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                console.log(\"Error obj is \", error);\n                if (error.response) {\n                    /*\n                     * The request was made and the server responded with a\n                     * status code that falls out of the range of 2xx\n                     */\n                    if (error.response.data) {\n                        console.log(error.response.data.errors);\n                        error.response.data.errors.map((e) => {\n                            tmp_error_arr.push(e.msg);\n                            console.log(\"debug e is \", e);\n                            return e;\n                        });\n                    }\n                    else {\n                        tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                        console.log(\"There seems to have been a network error\");\n                    }\n                }\n                else if (error.request) {\n                    /*\n                     * The request was made but no response was received, `error.request`\n                     * is an instance of XMLHttpRequest in the browser and an instance\n                     * of http.ClientRequest in Node.js\n                     */\n                    tmp_error_arr.push(error.message);\n\n                    console.log(\"2 error->\", error.message);\n                }\n                else {\n                    // Something happened in setting up the request and triggered an Error\n                    console.log('e Error is ', error.message);\n                }\n                set_error_messages_arr(tmp_error_arr);\n\n                //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n                setTimeout(() => {\n                    set_error_messages_arr([])\n                }, 5000);\n            });\n        }\n    }\n\n    const details_btn_clicked = (curr_job) => {\n        console.log(\"HERE\");\n        // if (user_details.num_open_applications === 10) {\n        //     alert(\"You already have 10 open applications\");\n        // }\n\n        // if (user_details.is_hired === true) {\n        //     alert(\"You are already a hired person. \");\n        // }\n        alert(\"Redirecting to another page\");\n        window.location.href = (\"/recruiter/listing_data/\" + curr_job._id);\n        // let history = useHistory();\n        // history.push(\"apply/\" + curr_job._id);\n\n\n    }\n\n\n    return (\n        <React.Fragment>\n\n            {/* Error div\n            Success div */}\n            {error_messages_arr.map((e) => (<ErrorNotification key={e} message={e} />))}\n            {success_messages_arr.map((e) => (<SuccessNotification key={e} message={e} />))}\n\n\n\n            {/* //////////////////////////////////////////////////////////////////////////////////// */}\n            <h1> HELLO to person with email id as {props.email_id}</h1>\n\n\n\n\n            <div style={{ display: track_edit_job ? '' : 'none' }}>\n\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>TITLE</th>\n                            <th>Date of Posting</th>\n                            <th>Date of Deadline</th>\n                            <th>MAX NUMBER OF APPS</th>\n                            <th>MAX NUMBER OF SLOTS</th>\n                            <th>Currently received APPS</th>\n                            <th>Filled slots</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {/* <tr>\n                        <td>1</td>\n                        <td>Mark</td>\n                        <td>Otto</td>\n                        <td>@mdo</td>\n                    </tr> */}\n\n                        {(edit_job_form.updated_job_obj === null) ? (null) :\n                            (\n                                <tr key={edit_job_form.updated_job_obj._id}>\n                                    {/* {console.log(curr_job.actual_rating)} */}\n                                    <td key={edit_job_form.updated_job_obj._id + \"a\"}>{edit_job_form.updated_job_obj.title}</td>\n                                    <td key={edit_job_form.updated_job_obj._id + \"b\"}>\n                                        {moment(edit_job_form.updated_job_obj.date_of_posting).add(330, 'minutes').format('D MMM YYYY, h:mm:ss A')}\n                                    </td>\n                                    <td key={edit_job_form.updated_job_obj._id + \"c\"}>\n                                        {moment(edit_job_form.updated_job_obj.date_of_deadline).add(330, 'minutes').format('D MMM YYYY, h:mm:ss A')}\n                                    </td>\n                                    <td key={edit_job_form.updated_job_obj._id + \"d\"}>{edit_job_form.updated_job_obj.max_applications}</td>\n                                    <td key={edit_job_form.updated_job_obj._id + \"e\"}>{edit_job_form.updated_job_obj.num_slots}</td>\n                                    {/* //https://stackoverflow.com/questions/17333425/add-a-duration-to-a-moment-moment-js */}\n                                    <td key={edit_job_form.updated_job_obj._id + \"f\"}>{edit_job_form.updated_job_obj.applications_received.length}</td>\n                                    <td key={edit_job_form.updated_job_obj._id + \"g\"}>{edit_job_form.updated_job_obj.applications_approved.length}</td>\n\n\n                                </tr>\n                            )\n                        }\n                    </tbody>\n                </Table >\n                <form id=\"update_form\" className='form' onSubmit={e => onSubmit(e)}>\n                    <label htmlFor=\"f1\">Modified number of total applications</label>\n\n                    <div className='form-group'>\n                        <input\n                            type='text'\n                            placeholder='(Non-zero) Enter maximum number of APPLICATIONS'\n                            // placeholder='(Non-zero) Enter maximum number of SLOTS THERE'\n                            name='updated_max_applications'\n                            value={edit_job_form.updated_max_applications}\n                            onChange={e => onChange(e)}\n                            id=\"f1\"\n                            className=\"form-control\"\n                            required\n                        />\n                    </div>\n                    {/* ////////////////////////////////////////////////////////// */}\n                    <div className='form-group'>\n                        <label htmlFor=\"f2\">Modified number of total slots</label>\n\n                        <input\n                            type='text'\n                            placeholder='(Non-zero) Enter maximum number of SLOTS THERE'\n                            name='updated_num_slots'\n                            value={edit_job_form.updated_num_slots}\n                            onChange={e => onChange(e)}\n                            id=\"f2\"\n                            className=\"form-control\"\n                            required\n                        />\n                    </div>\n                    {/* ////////////////////////////////////////////////////////// */}\n\n                    <div className='form-group'>\n                        <DateAndTimePickers onChange={onChange} expected_name={\"updated_date_of_deadline\"} sent_value={edit_job_form.updated_date_of_deadline} />\n                    </div>\n\n                    <input type='submit' className='btn btn-dark' value='Update' />\n                    {/* <input type='submit' className='btn btn-primary' value='Update' /> */}\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    <hr></hr>\n                </form>\n\n            </div>\n            {/* Title, Date of posting, Number of Applicants, Maximum Number of Positions. */}\n            {/* Table structure: Low level detials + edit + delete + view apps */}\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>TITLE</th>\n                        <th>Date of Posting</th>\n                        <th>Date of Deadline</th>\n                        <th>MAX NUMBER OF APPS</th>\n                        <th>MAX NUMBER OF SLOTS</th>\n                        <th>Currently received APPS</th>\n                        <th>Filled slots</th>\n                        <th>Action possible</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {jobs_master.map((curr_job) => {\n                        if (true) {\n                            return (\n                                <tr key={curr_job._id}>\n                                    {/* {console.log(curr_job.actual_rating)} */}\n                                    <td key={curr_job._id + \"a\"}>{curr_job.title}</td>\n                                    <td key={curr_job._id + \"b\"}>\n                                        {moment(curr_job.date_of_posting).add(330, 'minutes').format('D MMM YYYY, h:mm:ss A')}\n                                    </td>\n                                    <td key={curr_job._id + \"c\"}>\n                                        {moment(curr_job.date_of_deadline).add(330, 'minutes').format('D MMM YYYY, h:mm:ss A')}\n                                    </td>\n                                    <td key={curr_job._id + \"d\"}>{curr_job.max_applications}</td>\n                                    <td key={curr_job._id + \"e\"}>{curr_job.num_slots}</td>\n                                    {/* //https://stackoverflow.com/questions/17333425/add-a-duration-to-a-moment-moment-js */}\n                                    <td key={curr_job._id + \"f\"}>{curr_job.applications_received.length}</td>\n                                    <td key={curr_job._id + \"g\"}>{curr_job.applications_approved.length}</td>\n\n                                    <td key={curr_job._id + \"h\"}>\n\n                                        <Button variant=\"primary\" size=\"sm\" onClick={() => (edit_clicked(curr_job))}>EDIT</Button>\n                                        <Button variant=\"danger\" size=\"sm\" onClick={() => (delete_clicked(curr_job))}>DELETE</Button>\n                                        <Button variant=\"success\" size=\"sm\" onClick={() => details_btn_clicked(curr_job)} >Details</Button>\n\n                                    </td>\n                                </tr>\n                            )\n                        }\n                        else {\n                            return null;\n                        }\n                    })\n                    }\n                </tbody>\n            </Table >\n\n            {/* <Button variant=\"danger\" onClick={() => (props.attemptLogout())}>LogOut</Button> */}\n        </React.Fragment >\n    );\n}\n\nexport default My_listings;","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/ListingData.js",["144","145","146","147"],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/my_employees.js",["148","149","150"],"import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Button } from 'react-bootstrap';\nimport Alert from 'react-bootstrap/Alert';\nimport Table from 'react-bootstrap/Table';\n\nconst Error_notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n\n        <Alert key={message} variant={\"danger\"}>\n            Error: {message}\n        </Alert>\n\n\n    )\n}\n\nconst Success_notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n\n        <Alert key={message} variant={\"success\"}>\n            Success: {message}\n        </Alert>\n\n\n    )\n}\n\n\n//fetch only accepted employees\n//introduce rated option only if has not yated yet\n\n//fetch all accepted applications with populate\n//only return those whose job id has been from current recruiter\n//take care of the object type, string type thing\n\n\n\n\nconst MyEmployees = (props_sent) => {\n\n\n    const [people_master, set_people_master] = useState([]);\n    const [people_arr, set_people_arr] = useState([]);\n    const [error_messages_arr, set_error_messages_arr] = useState([]);     //success messages array\n    const [success_messages_arr, set_success_messages_arr] = useState([]);\n\n    const update_people_master = () => {\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n\n        let baseUrl = \"http://localhost:5000/api/help/my_employees\";\n\n        axios.get(baseUrl, {\n            params: {\n                email_id: props_sent.email_id\n            }\n        }).then((response) => {\n            console.log(\"Axios response is \", response.data);\n            let tmp_people_have = [...response.data];\n            // let tmp_len=tmp_people_have.length;\n            // for(let i=0;i<tmp_len;i++)\n            // {\n\n            // }\n            tmp_people_have = tmp_people_have.map((s) => {\n                if (s.person_rating === -1 || s.person_rating === undefined) {\n                    return { ...s, \"chosen_rating\": 1 };\n                }\n                else {\n                    return { ...s, \"chosen_rating\": s.person_rating };\n\n                }\n            });\n            set_people_master([...tmp_people_have]);\n            set_people_arr([...tmp_people_have]);\n            tmp_success_arr.push(\"Data fetch successful\");\n            set_success_messages_arr(tmp_success_arr);\n\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_success_messages_arr([])\n            }, 5000);\n        }).catch((error) => {\n            //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n            console.log(\"Error obj is \", error);\n            if (error.response) {\n                /*\n                 * The request was made and the server responded with a\n                 * status code that falls out of the range of 2xx\n                 */\n                if (error.response.data) {\n                    console.log(error.response.data.errors);\n                    error.response.data.errors.map((e) => {\n                        tmp_error_arr.push(e.msg);\n                        console.log(\"debug e is \", e);\n                        return e;\n                    });\n                }\n                else {\n                    tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                    console.log(\"There seems to have been a network error\");\n                }\n            }\n            else if (error.request) {\n                /*\n                 * The request was made but no response was received, `error.request`\n                 * is an instance of XMLHttpRequest in the browser and an instance\n                 * of http.ClientRequest in Node.js\n                 */\n                tmp_error_arr.push(error.message);\n\n                console.log(\"2 error->\", error.message);\n            }\n            else {\n                // Something happened in setting up the request and triggered an Error\n                console.log('e Error is ', error.message);\n            }\n            set_error_messages_arr(tmp_error_arr);\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_error_messages_arr([])\n            }, 5000);\n        });\n    };\n\n    const on_rating_change = (e, curr_man, idx) => {\n        let new_rat = Number(e.target.value);\n        let tmp_arr = [];\n        tmp_arr = people_arr.map((s, curr_idx) => {\n            if (idx === curr_idx) {\n                return { ...s, \"chosen_rating\": new_rat };\n            }\n            else {\n                return s;\n            }\n        });\n        set_people_arr(tmp_arr);\n\n    }\n\n    const rating_btn_clicked = (curr_obj) => {\n        let rating_val = curr_obj.chosen_rating;\n        let app_id = curr_obj._id;\n        let person_id = curr_obj.applicant_id._id;\n        let obj_to_send = {\n            rating_val, app_id, person_id\n        };\n        //////////////////////////////////////////////////////\n\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n\n        let baseUrl = \"http://localhost:5000/api/help/my_employees/rate\";\n\n        axios.post(baseUrl, obj_to_send).then((response) => {\n            console.log(\"Axios response is \", response.data);\n\n            tmp_success_arr.push(\"Rating updation successful\");\n            set_success_messages_arr(tmp_success_arr);\n\n            update_people_master();\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_success_messages_arr([])\n            }, 5000);\n        }).catch((error) => {\n            //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n            console.log(\"Error obj is \", error);\n            if (error.response) {\n                /*\n                 * The request was made and the server responded with a\n                 * status code that falls out of the range of 2xx\n                 */\n                if (error.response.data) {\n                    console.log(error.response.data.errors);\n                    error.response.data.errors.map((e) => {\n                        tmp_error_arr.push(e.msg);\n                        console.log(\"debug e is \", e);\n                        return e;\n                    });\n                }\n                else {\n                    tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                    console.log(\"There seems to have been a network error\");\n                }\n            }\n            else if (error.request) {\n                /*\n                 * The request was made but no response was received, `error.request`\n                 * is an instance of XMLHttpRequest in the browser and an instance\n                 * of http.ClientRequest in Node.js\n                 */\n                tmp_error_arr.push(error.message);\n\n                console.log(\"2 error->\", error.message);\n            }\n            else {\n                // Something happened in setting up the request and triggered an Error\n                console.log('e Error is ', error.message);\n            }\n            set_error_messages_arr(tmp_error_arr);\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_error_messages_arr([])\n            }, 5000);\n        });\n\n    }\n\n    //////////////////////////////////////////////////////////\n    const sort_button_clicked = e => {\n        console.log(typeof e.target.value);\n        console.log(e.target.id);\n        let tmp_people_arr = [...people_arr];\n        let chosen_func;\n        // let deadline_dts = new Date(deadline_str);\n\n        const str_date_cmp = (a, b) => {\n\n            //negative => a before b\n            a = new Date(a);\n            b = new Date(b);\n\n            return ((a - b < 0) ? -1 : ((a - b > 0) ? 1 : 0));\n        }\n        const strcmp = (a, b) => {\n\n            //negative => a before b\n            a = a.toLowerCase();\n            b = b.toLowerCase();\n\n            return (a < b ? -1 : (a > b ? 1 : 0));\n        }\n        // {\n        //     \"_id\": \"600bea89428709623bfa625d\",\n        //     \"sop\": \"A SOP FOR JOB 1\",\n        //     \"status\": \"accepted\",\n        //     \"applicant_id\": {\n        //         \"_id\": \"600be9c3428709623bfa6255\",\n        //         \"name\": \"a\"\n        //     },\n        //     \"job_id\": {\n        //         \"_id\": \"600bea39428709623bfa625b\",\n        //         \"job_type\": \"part_time\",\n        //         \"title\": \"JOB 1 for A and B\"\n        //     },\n        //     \"date_of_application\": \"2021-01-23T09:21\",\n        //     \"__v\": 0\n        // }\n        if (true) {\n            if (e.target.id === 'name_a') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return strcmp(x.applicant_id.name, y.applicant_id.name);\n                }\n            }\n            else if (e.target.id === 'name_d') {\n                //sort bjoining\n                chosen_func = function (x, y) {\n                    return -strcmp(x.applicant_id.name, y.applicant_id.name);\n                }\n            }\n            else if (e.target.id === 'doj_a') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return str_date_cmp(x.date_of_joining, y.date_of_joining);\n                }\n            }\n            else if (e.target.id === 'doj_d') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return -str_date_cmp(x.date_of_joining, y.date_of_joining);\n                }\n            }\n            else if (e.target.id === 'rat_a') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return x.chosen_rating - y.chosen_rating;\n                }\n\n            }\n            else if (e.target.id === 'rat_d') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return -(x.chosen_rating - y.chosen_rating);\n                }\n            }\n            else if (e.target.id === 'tit_a') {\n                //sort by ascending\n                chosen_func = function (x, y) {\n                    return strcmp(x.job_id.title, y.job_id.title);\n                }\n            }\n            else if (e.target.id === 'tit_d') {\n                //sort bjoining\n                chosen_func = function (x, y) {\n                    return -strcmp(x.job_id.title, y.job_id.title);\n                }\n            }\n        }\n        tmp_people_arr.sort(chosen_func);\n        set_people_arr(tmp_people_arr);\n\n\n    }\n\n    ///////////////////////////////////////////////////////////\n    useEffect(() => {\n        update_people_master();\n    }, []);\n\n\n\n    useEffect(() => {\n        console.log('inside use-effect of to update wanted array');\n        let tmp_people_arr = [...people_master];\n\n        set_people_arr(tmp_people_arr);\n        console.log(\"APPS WANTED IS \", tmp_people_arr);\n    }, [people_master]);\n\n\n    //table to see employees\n    return (\n        <React.Fragment>\n            {/* <h1>DEFAULT COMPONENT, NO ROUTER MATCHING</h1> */}\n            <h3> THIS IS EMPLOYEE VIEW PAGE for {props_sent.email_id}</h3>\n\n            {/* Error div\n            Success div */}\n            {error_messages_arr.map((e) => (<Error_notification key={e} message={e} />))}\n            {success_messages_arr.map((e) => (<Success_notification key={e} message={e} />))}\n\n            <>\n                <h3>Sort options</h3>\n\n                <Button variant=\"primary\" size=\"sm\" id=\"name_a\" onClick={(e) => (sort_button_clicked(e))}>Name (ascending)</Button>{' '}\n                <Button variant=\"secondary\" size=\"sm\" id=\"name_d\" onClick={(e) => (sort_button_clicked(e))}>Name (Descending)</Button>{' '}\n                <Button variant=\"success\" size=\"sm\" id=\"doj_a\" onClick={(e) => (sort_button_clicked(e))}>Joining date (ascending)</Button>{' '}\n                <Button variant=\"warning\" size=\"sm\" id=\"doj_d\" onClick={(e) => (sort_button_clicked(e))}>Joining date (Descending)</Button>{' '}\n                <Button variant=\"danger\" size=\"sm\" id=\"rat_a\" onClick={(e) => (sort_button_clicked(e))}>Rating (ascending)</Button>\n                <Button variant=\"dark\" size=\"sm\" id=\"rat_d\" onClick={(e) => (sort_button_clicked(e))}>Rating (Descending)</Button>{' '}\n                <Button variant=\"danger\" size=\"sm\" id=\"tit_a\" onClick={(e) => (sort_button_clicked(e))}>job title (ascending)</Button>\n                <Button variant=\"dark\" size=\"sm\" id=\"tit_d\" onClick={(e) => (sort_button_clicked(e))}>job title (Descending)</Button>{' '}\n                <br></br>\n                <br></br>\n                <br></br>\n                <br></br>\n            </>\n\n\n            {/* TABLE */}\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n\n                    <tr>\n                        {/* For each applicant,\nyou should display their Name, Date of Joining, Job Type (Full-Time/ Part-Time/\nWFH) and the Job Title they got accepted into.  */}\n                        <th>Person Name</th>\n                        <th>Date of joining</th>\n                        <th>JOB TYPE</th>\n                        <th>JOB TITLE</th>\n                        <th>Rating for person</th>\n                    </tr>\n                </thead>\n                <tbody>\n\n                    {people_arr.map((curr_man, idx) => {\n                        if (true) {\n                            return (\n                                <tr key={curr_man._id}>\n                                    {/* {console.log(curr_man.actual_rating)} */}\n                                    <td key={curr_man._id + \"a\"}>{curr_man.applicant_id.name}</td>\n                                    <td key={curr_man._id + \"b\"}>\n                                        {moment(curr_man.date_of_joining).add(330, 'minutes').format('D MMM YYYY, h:mm:ss A')}\n                                    </td>\n                                    <td key={curr_man._id + \"c\"}>\n                                        {curr_man.job_id.job_type}\n                                    </td>\n                                    <td key={curr_man._id + \"d\"}>{curr_man.job_id.title}</td>\n                                    <td key={curr_man._id + \"e\"}>\n                                        {(curr_man.person_rating === -1 || curr_man.person_rating === undefined) && (\n                                            <div className='form-group'>\n                                                <select key={curr_man._id + \"f\"} id=\"comboA\" name=\"chosen_rating\" onChange={e => on_rating_change(e, curr_man, idx)} value={curr_man.chosen_rating}>\n                                                    {/* <option value=\"\">Select combo</option> */}\n                                                    <option value=\"1\">1</option>\n                                                    <option value=\"2\">2</option>\n                                                    <option value=\"3\">3</option>\n                                                    <option value=\"4\">4</option>\n                                                    <option value=\"5\">5</option>\n                                                </select>\n                                                {\"   \"}\n                                                <button key={curr_man._id + \"btn f\"}\n                                                    type=\"button\"\n                                                    className=\"btn btn-secondary btn-sm\"\n                                                    onClick={() => rating_btn_clicked(curr_man)}\n\n                                                >\n                                                    Rate him</button>\n\n                                            </div>\n                                        )}\n                                        {(curr_man.person_rating !== -1 && curr_man.person_rating !== undefined) && (\n                                            <p> Already rated as {curr_man.chosen_rating}</p>\n                                        )}\n                                    </td>\n\n                                </tr>\n                            )\n                        }\n                        else {\n                            return null;\n                        }\n                    })\n                    }\n                </tbody>\n            </Table >\n\n\n\n        </React.Fragment>\n\n    )\n}\n\n\nexport default MyEmployees;\n","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/notification.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/applicant_dashboard.js",[],"/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/applicant_specific/edit_profile.js",["151","152","153","154"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Validate_helper from \"../../helper_files/validation_helper\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nconst ErrorNotification = require(\"../notification\").Error_notification;\nconst SuccessNotification = require(\"../notification\").Success_notification;\n\n\n\nconst EditApplicantProfile = (props_sent) => {\n    console.log(\"In EDIT APPLICANT.js\");\n    // // If logged in already, redirect to dashboard\n    // If not logged in, register option given Here\n    // Display form and chnage form fields based on this fields\n    // Change username, password here temporarily,\n    // if rejected, display error, else set username and redirection will be already set\n\n    const [error_messages_arr, set_error_messages_arr] = useState([]);     //success messages array\n    const [success_messages_arr, set_success_messages_arr] = useState([]);\n\n\n    const external_skills = [\"MACHINE LEARNING\", \"NETWORK PROGRAMMING\", \"FUNCTIONAL PROGRAMMING\", \"DATABASE DESIGN\"];\n\n\n    const [formData, setFormData] = useState({\n        name: '',\n        email_id: '',\n        user_type: \"type_a\",\n        ///////////////////\n        curr_skill: '',\n        skills_list: [],\n        //-----------------------\n        ed_list: [],\n        curr_college: \"\",\n        curr_end_yr: \"\",\n        curr_start_yr: \"\",\n    });\n\n    const [image_form, set_image_form] = useState({\n        uploaded_file: null\n    });\n\n    const [master_data, set_master_data] = useState(\n        {\n        }\n    );\n\n    const { name, email_id, user_type, curr_skill, skills_list, curr_college, curr_start_yr, curr_end_yr, ed_list } = formData;\n\n\n    ////#########################################################################################################\n    // Takes care of handling change in inputs\n    const onChange = e => {\n        console.log(typeof e.target.value);\n        let val_set = e.target.value;\n        if (e.target.name === \"curr_start_yr\" || e.target.name === \"curr_end_yr\") {\n            console.log(\"YEP\");\n            val_set = Validate_helper.get_pos_integer(val_set);\n        }\n        console.log(\"Setter \", e.target.name, \": \", val_set);\n        setFormData({ ...formData, [e.target.name]: val_set });\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n\n    const update_form_master = () => {\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n\n        let baseUrl = \"http://localhost:5000/api/users/applicant/get_profile\";\n\n        axios.get(baseUrl, {\n            params: {\n                email_id: props_sent.email_id\n            }\n        }).then((response) => {\n            console.log(\"Axios response is \", response.data);\n            let tmp_data_have = { ...response.data };\n            // if (!(\"profile_image_path\" in tmp_data_have)) {\n            //     tmp_data_have = { ...tmp_data_have, \"profile_image_path\": \"\" };\n            // }\n\n            console.log(\"tmp data is \", tmp_data_have);\n\n            set_master_data(tmp_data_have);\n            setFormData({ ...formData, ...tmp_data_have });\n            // tmp_success_arr.push(\"Data fetch successful\");\n            // set_success_messages_arr(tmp_success_arr);\n\n\n            // //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            // setTimeout(() => {\n            //     set_success_messages_arr([])\n            // }, 5000);\n        })\n            .catch((error) => {\n                //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                console.log(\"Error obj is \", error);\n                if (error.response) {\n                    /*\n                     * The request was made and the server responded with a\n                     * status code that falls out of the range of 2xx\n                     */\n                    if (error.response.data) {\n                        console.log(error.response.data.errors);\n                        error.response.data.errors.map((e) => {\n                            tmp_error_arr.push(e.msg);\n                            console.log(\"debug e is \", e);\n                            return e;\n                        });\n                    }\n                    else {\n                        tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                        console.log(\"There seems to have been a network error\");\n                    }\n                }\n                else if (error.request) {\n                    /*\n                     * The request was made but no response was received, `error.request`\n                     * is an instance of XMLHttpRequest in the browser and an instance\n                     * of http.ClientRequest in Node.js\n                     */\n                    tmp_error_arr.push(error.message);\n\n                    console.log(\"2 error->\", error.message);\n                }\n                else {\n                    // Something happened in setting up the request and triggered an Error\n                    console.log('e Error is ', error.message);\n                }\n                set_error_messages_arr(tmp_error_arr);\n\n                //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n                setTimeout(() => {\n                    set_error_messages_arr([])\n                }, 5000);\n            });\n    };\n\n    useEffect(() => {\n        console.log(\"in use effect of edit applicnat profile\");\n        update_form_master();\n    }, []);\n\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n        // if (password !== password2) {\n        //   console.log('Passwords do not match');\n        //   tmp_error_arr.push(\"Passwords do not match\");\n        //   alert('Passwords do not match');\n\n        // }\n        // if (!Validate_helper.is_valid_email(email_id)) {\n        //     alert('Invalid email');\n        //     tmp_error_arr.push(\"Email is invalid\");\n        // }\n\n        if (tmp_error_arr.length === 0) {\n            console.log(\"Modified data is \", formData);\n            alert('You have submitted the form.');\n            try {\n                let baseUrl;\n                if (user_type === \"type_r\") {\n                    baseUrl = \"http://localhost:5000/api/users/recruiter/edit_profile\";\n                }\n                else {\n                    baseUrl = \"http://localhost:5000/api/users/applicant/edit_profile\";\n                }\n\n                const response = await axios.post(baseUrl, formData);\n                console.log(\"Axios response is \", response);\n                tmp_success_arr.push(\"Profile updation successful\");\n                set_success_messages_arr(tmp_success_arr);\n                update_form_master();\n\n                setTimeout(() => {\n                    set_success_messages_arr([])\n                }, 5000);\n\n            }\n            catch (error) {\n                //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                console.log(\"Error obj is \", error);\n                if (error.response) {\n                    /*\n                     * The request was made and the server responded with a\n                     * status code that falls out of the range of 2xx\n                     */\n                    console.log(\"In catch block\");\n                    if (error.response.data) {\n                        console.log(error.response.data.errors);\n                        error.response.data.errors.map((e) => {\n                            tmp_error_arr.push(e.msg);\n                            console.log(\"debug e is \", e);\n                            return e;\n                        });\n                    }\n                    else {\n                        tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n                        console.log(\"There seems to have been a network error\");\n                    }\n                } else if (error.request) {\n                    /*\n                     * The request was made but no response was received, `error.request`\n                     * is an instance of XMLHttpRequest in the browser and an instance\n                     * of http.ClientRequest in Node.js\n                     */\n                    console.log(\" request was made but no response was received\");\n\n                    tmp_error_arr.push(error.message);\n\n                    console.log(\"2 error->\", error.message);\n                } else {\n                    // Something happened in setting up the request and triggered an Error\n                    console.log('e Error is ', error.message);\n                }\n\n            }\n        }\n\n        set_error_messages_arr(tmp_error_arr);\n        //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n        setTimeout(() => {\n            set_error_messages_arr([])\n        }, 2000);\n\n    };\n\n\n    const add_skill = () => {\n        console.log(\"trying to add skill as \", curr_skill);\n        if (curr_skill.length < 1) {\n            alert(\"Skill foeld must have atleast one character\");\n            return;\n        }\n        //check if skill not already there, then add skill\n        let skill_to_add = curr_skill.toUpperCase();\n        if (!skills_list.includes(skill_to_add)) {\n            let tmp_list = skills_list.map((s) => (s));\n            if (external_skills.includes(skill_to_add)) {\n                alert(\"This skill is already present externally. No need to add separately\");\n                setFormData({ ...formData, \"curr_skill\": \"\" });\n                return;\n            }\n            tmp_list.push(skill_to_add);\n            setFormData({ ...formData, \"curr_skill\": \"\", \"skills_list\": tmp_list });\n\n        }\n        else {\n            setFormData({ ...formData, \"curr_skill\": \"\" });\n        }\n\n    }\n\n    const delete_skill = (skill_to_delete) => {\n        console.log(\"trying to delete skill : \", skill_to_delete);\n\n        let tmp_list = skills_list.filter((s) => (s !== skill_to_delete));\n        setFormData({ ...formData, \"skills_list\": tmp_list });\n    }\n\n    const delete_college = (college_to_go) => {\n        console.log(\"trying to delete college entry : \", college_to_go);\n\n        let tmp_list = ed_list.filter((s) => ((s.institute !== college_to_go.institute) ||\n            (s.start_yr !== college_to_go.start_yr) ||\n            (s.end_yr !== college_to_go.end_yr)));\n        setFormData({ ...formData, \"ed_list\": tmp_list });\n    }\n\n    const add_college = () => {\n\n        if (curr_college.length === 0) {\n            alert(\"Institute name must have atleast one character\");\n            return;\n        }\n        if (curr_start_yr.length === 0) {\n            alert(\"A start year must be present\");\n            return;\n        }\n\n        if (Number(curr_start_yr.length) === 0) {\n            alert(\"A start year must be present\");\n            return;\n        }\n        let a1 = parseInt(curr_start_yr);\n        let a2 = parseInt(curr_end_yr);\n        if (curr_end_yr.length !== 0) {\n\n            if (a1 > a2) {\n                alert(\"Start year must be less than or equal to end year!! \");\n                return;\n            }\n\n            if (a2 > 2050) {\n                alert(\"Be reasonable. Alert year cannot exceed 2050 \");\n                return;\n            }\n\n        }\n\n        if (a1 > 2021) {\n            alert(\"Start year cannot exceed 2021\");\n            return;\n        }\n\n        if (a1 < 1900) {\n            alert(\"Start year cannot be before than 1900\");\n            return;\n        }\n        let tmp_obj = { \"institute\": curr_college, \"start_yr\": curr_start_yr, \"end_yr\": curr_end_yr };\n        let tmp_list = ed_list.map((s) => (s));\n        tmp_list.push(tmp_obj);\n        setFormData({ ...formData, \"curr_college\": \"\", \"curr_start_yr\": \"\", \"curr_end_yr\": \"\", ed_list: tmp_list });\n\n    }\n\n    const changeProfileImage = (e) => {\n        console.log(e.target.files[0]);\n        set_image_form({ uploaded_file: e.target.files[0] });\n\n    }\n\n    const UpdateProfileHandler = (e) => {\n        e.preventDefault();\n        //create object of form data\n        const image_formData = new FormData();\n        image_formData.append(\"profileImage\", image_form.uploaded_file);\n        image_formData.append(\"email_id\", email_id);\n\n        //update-profile\n        axios.post(\"http://localhost:5000/api/help/upload_image\", image_formData, {\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        }).then(res => {\n            console.log(res);\n            update_form_master();\n        })\n            .catch(err => console.log(err))\n    }\n\n\n    const checkbox_clicked = (e, skill_str) => {\n        if (e.currentTarget.checked) {\n            // alert('checked');\n            let tmp_list = [...skills_list, skill_str];\n            setFormData({ ...formData, \"skills_list\": tmp_list });\n        } else {\n            //  alert('not checked');\n            let tmp_list = skills_list.filter((s) => (s != skill_str));\n            setFormData({ ...formData, \"skills_list\": tmp_list });\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <h1 className='large text-primary'>Edit Profile</h1>\n            <hr></hr>\n            {error_messages_arr.map((e) => (<ErrorNotification key={e} message={e} />))}\n\n            <div>\n\n                <div>\n                    {(master_data.profile_image_path !== \"\" && master_data.profile_image_path !== undefined) &&\n                        <img src={\"http://localhost:5000/\"+master_data.profile_image_path} className=\"img-thumbnail\" width=\"15%\" height=\"15%\" />\n                    }\n\n                    {(master_data.profile_image_path === \"\" || master_data.profile_image_path === undefined) &&\n                        (<>\n                            <Form.Group controlId=\"formCategory4\">\n                                <Form.Label>Profile Image</Form.Label>\n                                <Form.Control type=\"file\" name=\"profileImage\" onChange={(e) => changeProfileImage(e)} />\n                            </Form.Group>\n                            <Button variant=\"primary\" onClick={(e) => UpdateProfileHandler(e)}>Upload Image</Button>\n                        </>)\n                    }\n                </div>\n\n\n\n\n                <hr />\n                <hr />\n                <hr />\n                <hr />\n                {/* //////////////////////////////////////////////////////////////////////////////////////////////////////// */}\n                <form id=\"registration_form\" className='form' onSubmit={e => onSubmit(e)}>\n\n\n                    <div className='form-group'>\n                        <label htmlFor=\"f1\">Name</label>\n                        <input\n                            className=\"form-control\"\n                            type='text'\n                            id=\"f1\"\n                            placeholder='Enter Name'\n                            name='name'\n                            value={name}\n                            onChange={e => onChange(e)}\n                            required\n                        />\n                    </div>\n\n                    <div className='form-group'>\n                        <label htmlFor=\"f2\">Email</label>\n\n                        <input\n                            type='email'\n                            id=\"f2\"\n                            className=\"form-control\"\n                            placeholder='Email Address'\n                            name='email_id'\n                            value={email_id}\n                            onChange={e => onChange(e)}\n                            required\n                            readOnly\n                        />\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n\n                    </div>\n\n\n\n                    <div className='form-group'>\n                        <label htmlFor=\"comboA\">USER TYPE</label>\n\n                        <select id=\"comboA\"\n                            className=\"form-control\" name=\"user_type\" onChange={e => onChange(e)} value={user_type} disabled>\n                            {/* <option value=\"\">Select combo</option> */}\n                            <option value=\"type_a\">Applicant</option>\n                            <option value=\"type_r\">Recruiter</option>\n                        </select>\n                    </div>\n\n                    <br></br>\n                    <hr />\n\n                    {/* /////////////////////////////\n         For applicant \n         ////////////////////////////////////////////////////////////////////////////////////////////////*/}\n\n                    {user_type === \"type_a\" &&\n                        <React.Fragment>\n                            <div className='form-group'>\n                                <label htmlFor=\"f22\"><b>ENTER YOUR SKILLS</b></label>\n\n\n                                <div>\n                                    <p>Some popular skills these days can be selected from below</p>\n                                    {external_skills.map((s) => {\n                                        return (\n                                            <div key={s} className=\"form-check form-check-inline\">\n                                                <input\n                                                    className=\"form-check-input\"\n                                                    type=\"checkbox\" id={\"inlineCheckbox\" + s}\n                                                    value={s}\n                                                    onChange={(e) => checkbox_clicked(e, s)}\n                                                    checked={formData.skills_list.includes(s)}\n                                                />\n                                                <label className=\"form-check-label\" htmlFor=\"inlineCheckbox1\">{s}</label>\n                                                <br></br>\n                                                <br></br>\n                                            </div>)\n                                    })}\n                                </div>\n\n\n\n                                <input\n                                    type='text'\n                                    placeholder='Enter a language/skill to add to list of total list of languages you know'\n                                    id=\"f22\"\n                                    className=\"form-control\"\n                                    name='curr_skill'\n                                    value={curr_skill}\n                                    onChange={e => onChange(e)}\n                                />\n                                <br></br>\n                                <button type=\"button\" className=\"btn btn-secondary btn-sm\" onClick={() => add_skill()}>ADD this skill</button>\n                            </div>\n\n                            <table className=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">#</th>\n                                        <th scope=\"col\">Skill Name</th>\n                                        <th scope=\"col\">Possible Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {skills_list.map((skill_there, idx) => {\n                                        return (\n                                            <tr key={skill_there}>\n                                                <th scope=\"row\">{idx + 1}</th>\n                                                <td>{skill_there}</td>\n                                                {(!(external_skills.includes(skill_there))) &&\n                                                    <td><button type=\"button\" className=\"btn btn-dark btn-sm\" onClick={() => delete_skill(skill_there)}>Delete this skill</button></td>}\n                                                {((external_skills.includes(skill_there))) &&\n                                                    <td>-</td>}\n                                            </tr>);\n                                    })}\n\n\n                                </tbody>\n                            </table>\n\n\n                            <br></br>\n                            {/* /////////////////////////////////////////////////////////////////////////////// */}\n                            <hr></hr>\n\n\n                            <h4>Educational details</h4>\n\n                            <table className=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">#</th>\n                                        <th scope=\"col\">Institute</th>\n                                        <th scope=\"col\">Start year</th>\n                                        <th scope=\"col\">End year</th>\n                                        <th scope=\"col\">Possible action</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {ed_list.map((e_obj, idx) => (\n                                        <tr key={e_obj.institute + \" \" + e_obj.start_yr + \" \" + e_obj.end_yr}>\n                                            <td>{idx + 1}</td>\n                                            <td>{e_obj.institute}</td>\n                                            <td>{e_obj.start_yr}</td>\n                                            <td>{e_obj.end_yr}</td>\n                                            <td><button type=\"button\" className=\"btn btn-dark btn-sm\" onClick={() => delete_college(e_obj)}>Delete this entry</button></td>\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                            <br></br>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"f25\">ENTER institute name</label>\n                                <input\n                                    type='text'\n                                    placeholder='Enter institute name'\n                                    name='curr_college'\n                                    id=\"f25\"\n                                    className=\"form-control\"\n                                    value={curr_college}\n                                    onChange={e => onChange(e)}\n                                />\n                            </div>\n                            <div className=\"form-row\">\n                                <div className=\"col\">\n                                    <label htmlFor=\"f27\">Start year</label>\n                                    <input type=\"text\" name=\"curr_start_yr\" id=\"f27\" className=\"form-control\" value={curr_start_yr} onChange={e => onChange(e)} />\n                                </div>\n                                <div className=\"col\">\n                                    <label htmlFor=\"f28\">End year</label>\n                                    <input type=\"text\" name=\"curr_end_yr\" id=\"f28\" className=\"form-control\" value={curr_end_yr} onChange={e => onChange(e)} />\n                                </div>\n                            </div>\n                            <br></br>\n                            <button type=\"button\" className='btn btn-secondary btn-sm' onClick={() => add_college()}>ADD this educational instance</button>\n\n                            <br></br>\n\n                            <hr />\n\n\n\n\n                        </React.Fragment>\n                    }\n\n\n                    {/* Error div             Success div */}\n\n                    {success_messages_arr.map((e) => (<SuccessNotification key={e} message={e} />))}\n\n                    <br></br>\n                    <br />\n                    <input type='submit' className='btn btn-primary btn-lg' value='Update Profile' />\n                </form>\n\n            </div>\n        </React.Fragment >\n    );\n};\n\nexport default EditApplicantProfile;\n","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/recruiter_specific/edit_profile_recruiter.js",["155","156","157","158"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Validate_helper from \"../../helper_files/validation_helper\";\nconst ErrorNotification = require(\"../notification\").Error_notification;\nconst SuccessNotification = require(\"../notification\").Success_notification;\n\nconst EditRecruiterProfile = (props_sent) => {\n    console.log(\"In EDIT APPLICANT.js\");\n    // // If logged in already, redirect to dashboard\n    // If not logged in, register option given Here\n    // Display form and chnage form fields based on this fields\n    // Change username, password here temporarily,\n    // if rejected, display error, else set username and redirection will be already set\n\n    const [error_messages_arr, set_error_messages_arr] = useState([]);     //success messages array\n    const [success_messages_arr, set_success_messages_arr] = useState([]);\n\n\n    const external_skills = [\"MACHINE LEARNING\", \"NETWORK PROGRAMMING\", \"FUNCTIONAL PROGRAMMING\", \"DATABASE DESIGN\"];\n\n\n    const [formData, setFormData] = useState({\n        name: '',\n        email_id: '',\n        user_type: \"type_r\",\n        ///////////////////\n        phone_num: \"\",\n        bio: \"\"\n    });\n\n    const [master_data, set_master_data] = useState();\n\n    const { name, email_id, user_type, phone_num, bio } = formData;\n\n\n    ////#########################################################################################################\n    // Takes care of handling change in inputs\n    const onChange = e => {\n        console.log(typeof e.target.value);\n        let val_set = e.target.value;\n        if (e.target.name === \"phone_num\" ) {\n            console.log(\"YEP\");\n            val_set = Validate_helper.get_pos_integer(val_set);\n        }\n        console.log(\"Setter \", e.target.name, \": \", val_set);\n        setFormData({ ...formData, [e.target.name]: val_set });\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////\n\n    const update_form_master = () => {\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n\n        let baseUrl = \"http://localhost:5000/api/users/recruiter/get_profile\";\n\n        axios.get(baseUrl, {\n            params: {\n                email_id: props_sent.email_id\n            }\n        }).then((response) => {\n            console.log(\"Axios response is \", response.data);\n            let tmp_data_have = { ...response.data };\n\n            set_master_data(tmp_data_have);\n            setFormData({ ...formData, ...tmp_data_have });\n            // tmp_success_arr.push(\"Data fetch successful\");\n            // set_success_messages_arr(tmp_success_arr);\n\n\n            // //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            // setTimeout(() => {\n            //     set_success_messages_arr([])\n            // }, 5000);\n        }).catch((error) => {\n            //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n            console.log(\"Error obj is \", error);\n            if (error.response) {\n                /*\n                 * The request was made and the server responded with a\n                 * status code that falls out of the range of 2xx\n                 */\n                if (error.response.data) {\n                    console.log(error.response.data.errors);\n                    error.response.data.errors.map((e) => {\n                        tmp_error_arr.push(e.msg);\n                        console.log(\"debug e is \", e);\n                        return e;\n                    });\n                }\n                else {\n                    tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n\n                    console.log(\"There seems to have been a network error\");\n                }\n            }\n            else if (error.request) {\n                /*\n                 * The request was made but no response was received, `error.request`\n                 * is an instance of XMLHttpRequest in the browser and an instance\n                 * of http.ClientRequest in Node.js\n                 */\n                tmp_error_arr.push(error.message);\n\n                console.log(\"2 error->\", error.message);\n            }\n            else {\n                // Something happened in setting up the request and triggered an Error\n                console.log('e Error is ', error.message);\n            }\n            set_error_messages_arr(tmp_error_arr);\n\n            //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n            setTimeout(() => {\n                set_error_messages_arr([])\n            }, 5000);\n        });\n    };\n\n    useEffect(() => {\n        console.log(\"in use effect of edit RECRUITER profile\");\n        update_form_master();\n    }, []);\n\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        let tmp_error_arr = [];\n        let tmp_success_arr = [];\n        if (user_type === \"type_r\" && phone_num.toString().length !== 10) {\n            alert('Phone number must have 10 digits');\n            tmp_error_arr.push(\"Phone number must have 10 digits\");\n          }\n        if (tmp_error_arr.length === 0) {\n            console.log(\"Modified data is \", formData);\n            alert('You have submitted the form.');\n            try {\n                let baseUrl;\n                if (user_type === \"type_r\") {\n                    baseUrl = \"http://localhost:5000/api/users/recruiter/edit_profile\";\n                }\n                else {\n                    baseUrl = \"http://localhost:5000/api/users/applicant/edit_profile\";\n                }\n\n                const response = await axios.post(baseUrl, formData);\n                console.log(\"Axios response is \", response);\n                tmp_success_arr.push(\"Profile updation successful\");\n                set_success_messages_arr(tmp_success_arr);\n                update_form_master();\n\n                setTimeout(() => {\n                    set_success_messages_arr([])\n                }, 5000);\n\n            }\n            catch (error) {\n                //   //https://gist.github.com/fgilio/230ccd514e9381fafa51608fcf137253\n                console.log(\"Error obj is \", error);\n                if (error.response) {\n                    /*\n                     * The request was made and the server responded with a\n                     * status code that falls out of the range of 2xx\n                     */\n                    console.log(\"In catch block\");\n                    if (error.response.data) {\n                        console.log(error.response.data.errors);\n                        error.response.data.errors.map((e) => {\n                            tmp_error_arr.push(e.msg);\n                            console.log(\"debug e is \", e);\n                            return e;\n                        });\n                    }\n                    else {\n                        tmp_error_arr.push(\"THERE SEEMS TO BE A NETWORK ERROR\");\n                        console.log(\"There seems to have been a network error\");\n                    }\n                } else if (error.request) {\n                    /*\n                     * The request was made but no response was received, `error.request`\n                     * is an instance of XMLHttpRequest in the browser and an instance\n                     * of http.ClientRequest in Node.js\n                     */\n                    console.log(\" request was made but no response was received\");\n\n                    tmp_error_arr.push(error.message);\n\n                    console.log(\"2 error->\", error.message);\n                } else {\n                    // Something happened in setting up the request and triggered an Error\n                    console.log('e Error is ', error.message);\n                }\n\n            }\n        }\n\n        set_error_messages_arr(tmp_error_arr);\n        //When the error occurs we add a descriptive error message to the errorMessage state. At the same time we start a timer, that will set the errorMessage state to null after five seconds.\n        setTimeout(() => {\n            set_error_messages_arr([])\n        }, 2000);\n\n    };\n\n\n    return (\n        <React.Fragment>\n            <h1 className='large text-primary'>Edit Profile</h1>\n            {error_messages_arr.map((e) => (<ErrorNotification key={e} message={e} />))}\n\n            {/* //////////////////////////////////////////////////////////////////////////////////////////////////////// */}\n            <form id=\"registration_form\" className='form' onSubmit={e => onSubmit(e)}>\n\n\n                <div className='form-group'>\n                    <label htmlFor=\"f1\">Name</label>\n                    <input\n                        className=\"form-control\"\n                        type='text'\n                        id=\"f1\"\n                        placeholder='Enter Name'\n                        name='name'\n                        value={name}\n                        onChange={e => onChange(e)}\n                        required\n                    />\n                </div>\n\n                <div className='form-group'>\n                    <label htmlFor=\"f2\">Email</label>\n\n                    <input\n                        type='email'\n                        id=\"f2\"\n                        className=\"form-control\"\n                        placeholder='Email Address'\n                        name='email_id'\n                        value={email_id}\n                        onChange={e => onChange(e)}\n                        required\n                        readOnly\n                    />\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n\n                </div>\n\n\n\n                <div className='form-group'>\n                    <label htmlFor=\"comboA\">USER TYPE</label>\n\n                    <select id=\"comboA\"\n                        className=\"form-control\" name=\"user_type\" onChange={e => onChange(e)} value={user_type} disabled>\n                        {/* <option value=\"\">Select combo</option> */}\n                        <option value=\"type_a\">Applicant</option>\n                        <option value=\"type_r\">Recruiter</option>\n                    </select>\n                </div>\n\n                {/* /////////////////////////////\n         For Recruiter\n         ////////////////////////////////////*/}\n                {user_type === \"type_r\" &&\n                    <React.Fragment>\n                        <label htmlFor=\"f12\">Phone Number</label>\n                        <div className='form-group'>\n                            <input\n                                type='text'\n                                id=\"f12\"\n                                className=\"form-control\"\n                                placeholder='Enter phone number here'\n                                name='phone_num'\n                                value={phone_num}\n                                onChange={e => onChange(e)}\n                            />\n                        </div>\n\n                        <div className='form-group'>\n                            <label htmlFor=\"f13\">Enter bio information</label>\n\n                            <textarea\n                                form=\"registration_form\"\n                                name=\"bio\"\n                                rows=\"4\"\n                                cols=\"50\"\n                                id=\"f13\"\n                                className=\"form-control\"\n                                maxLength=\"250\"\n                                onChange={e => onChange(e)}\n                                value={bio}\n                            />\n\n                        </div>\n                        <hr />\n\n                    </React.Fragment>\n                }\n                <br></br>\n                <hr />\n                {/* Error div             Success div */}\n\n                {success_messages_arr.map((e) => (<SuccessNotification key={e} message={e} />))}\n\n                <br></br>\n                <br />\n                <input type='submit' className='btn btn-primary btn-lg' value='Update Profile' />\n            </form>\n\n        </React.Fragment >\n    );\n};\n\nexport default EditRecruiterProfile;\n","/home/anmolagarwal/Desktop/dass_assign_1/frontend/src/components/verify_access.js",["159"],"import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst VerifyAccess = (props_sent) => {\n    let is_really_LoggedIn = true;\n    if (!props_sent.is_logged_in) {\n        return <Redirect to=\"/login\" />;\n    }\n    if (props_sent.category !== (props_sent.type)) {\n        if (props_sent.type === \"type_a\") {\n            return <Redirect to=\"/applicant/dashboard\" />;\n        }\n        else {\n            return <Redirect to=\"/recruiter/dashboard\" />;\n        }\n    }\n    // Impoertance of route to is that it kind of works like a new Route and does not depend onroutes on the main menu\n    // Remember your mistake of using 'all_listing' instead of 'all_listings'\n    return <Route render={(props) => props_sent.component_to_use} />;\n}\n\nexport default VerifyAccess;\n\n",{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":33,"column":10,"nodeType":"166","messageId":"167","endLine":33,"endColumn":25},{"ruleId":"164","severity":1,"message":"168","line":33,"column":27,"nodeType":"166","messageId":"167","endLine":33,"endColumn":46},{"ruleId":"169","severity":1,"message":"170","line":77,"column":6,"nodeType":"171","endLine":77,"endColumn":8,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":154,"column":37,"nodeType":"175","endLine":154,"endColumn":91},{"ruleId":"173","severity":1,"message":"176","line":165,"column":37,"nodeType":"175","endLine":165,"endColumn":91},{"ruleId":"173","severity":1,"message":"177","line":225,"column":37,"nodeType":"175","endLine":225,"endColumn":95},{"ruleId":"173","severity":1,"message":"178","line":236,"column":37,"nodeType":"175","endLine":236,"endColumn":133},{"ruleId":"179","severity":1,"message":"180","line":41,"column":1,"nodeType":"181","endLine":41,"endColumn":99},{"ruleId":"164","severity":1,"message":"182","line":2,"column":27,"nodeType":"166","messageId":"167","endLine":2,"endColumn":33},{"ruleId":"164","severity":1,"message":"183","line":2,"column":35,"nodeType":"166","messageId":"167","endLine":2,"endColumn":40},{"ruleId":"164","severity":1,"message":"184","line":2,"column":42,"nodeType":"166","messageId":"167","endLine":2,"endColumn":46},{"ruleId":"164","severity":1,"message":"184","line":2,"column":10,"nodeType":"166","messageId":"167","endLine":2,"endColumn":14},{"ruleId":"164","severity":1,"message":"185","line":4,"column":10,"nodeType":"166","messageId":"167","endLine":4,"endColumn":16},{"ruleId":"164","severity":1,"message":"186","line":6,"column":10,"nodeType":"166","messageId":"167","endLine":6,"endColumn":20},{"ruleId":"164","severity":1,"message":"187","line":7,"column":8,"nodeType":"166","messageId":"167","endLine":7,"endColumn":17},{"ruleId":"164","severity":1,"message":"188","line":13,"column":7,"nodeType":"166","messageId":"167","endLine":13,"endColumn":19},{"ruleId":"164","severity":1,"message":"189","line":42,"column":12,"nodeType":"166","messageId":"167","endLine":42,"endColumn":24},{"ruleId":"164","severity":1,"message":"190","line":42,"column":26,"nodeType":"166","messageId":"167","endLine":42,"endColumn":41},{"ruleId":"164","severity":1,"message":"191","line":64,"column":124,"nodeType":"166","messageId":"167","endLine":64,"endColumn":139},{"ruleId":"192","severity":1,"message":"193","line":307,"column":41,"nodeType":"194","endLine":307,"endColumn":48},{"ruleId":"164","severity":1,"message":"195","line":54,"column":34,"nodeType":"166","messageId":"167","endLine":54,"endColumn":58},{"ruleId":"196","severity":1,"message":"197","line":119,"column":68,"nodeType":"198","messageId":"199","endLine":119,"endColumn":70},{"ruleId":"196","severity":1,"message":"197","line":161,"column":60,"nodeType":"198","messageId":"199","endLine":161,"endColumn":62},{"ruleId":"169","severity":1,"message":"200","line":203,"column":8,"nodeType":"171","endLine":203,"endColumn":10,"suggestions":"201"},{"ruleId":"192","severity":1,"message":"193","line":432,"column":25,"nodeType":"194","endLine":432,"endColumn":32},{"ruleId":"192","severity":1,"message":"193","line":447,"column":25,"nodeType":"194","endLine":447,"endColumn":32},{"ruleId":"164","severity":1,"message":"195","line":15,"column":34,"nodeType":"166","messageId":"167","endLine":15,"endColumn":58},{"ruleId":"164","severity":1,"message":"202","line":40,"column":13,"nodeType":"166","messageId":"167","endLine":40,"endColumn":28},{"ruleId":"164","severity":1,"message":"203","line":4,"column":10,"nodeType":"166","messageId":"167","endLine":4,"endColumn":20},{"ruleId":"164","severity":1,"message":"204","line":6,"column":7,"nodeType":"166","messageId":"167","endLine":6,"endColumn":24},{"ruleId":"164","severity":1,"message":"205","line":7,"column":7,"nodeType":"166","messageId":"167","endLine":7,"endColumn":26},{"ruleId":"164","severity":1,"message":"206","line":19,"column":12,"nodeType":"166","messageId":"167","endLine":19,"endColumn":20},{"ruleId":"164","severity":1,"message":"207","line":21,"column":12,"nodeType":"166","messageId":"167","endLine":21,"endColumn":30},{"ruleId":"164","severity":1,"message":"208","line":22,"column":12,"nodeType":"166","messageId":"167","endLine":22,"endColumn":32},{"ruleId":"164","severity":1,"message":"202","line":28,"column":13,"nodeType":"166","messageId":"167","endLine":28,"endColumn":28},{"ruleId":"169","severity":1,"message":"209","line":91,"column":8,"nodeType":"171","endLine":91,"endColumn":10,"suggestions":"210"},{"ruleId":"164","severity":1,"message":"211","line":4,"column":8,"nodeType":"166","messageId":"167","endLine":4,"endColumn":13},{"ruleId":"169","severity":1,"message":"212","line":240,"column":8,"nodeType":"171","endLine":240,"endColumn":10,"suggestions":"213"},{"ruleId":"164","severity":1,"message":"211","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":13},{"ruleId":"164","severity":1,"message":"214","line":24,"column":12,"nodeType":"166","messageId":"167","endLine":24,"endColumn":23},{"ruleId":"164","severity":1,"message":"215","line":24,"column":25,"nodeType":"166","messageId":"167","endLine":24,"endColumn":40},{"ruleId":"169","severity":1,"message":"216","line":112,"column":8,"nodeType":"171","endLine":112,"endColumn":10,"suggestions":"217"},{"ruleId":"169","severity":1,"message":"218","line":325,"column":8,"nodeType":"171","endLine":325,"endColumn":10,"suggestions":"219"},{"ruleId":"173","severity":1,"message":"220","line":346,"column":45,"nodeType":"175","endLine":346,"endColumn":87},{"ruleId":"173","severity":1,"message":"221","line":347,"column":47,"nodeType":"175","endLine":347,"endColumn":91},{"ruleId":"164","severity":1,"message":"202","line":69,"column":13,"nodeType":"166","messageId":"167","endLine":69,"endColumn":28},{"ruleId":"169","severity":1,"message":"222","line":145,"column":8,"nodeType":"171","endLine":145,"endColumn":10,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":356,"column":57,"nodeType":"226","messageId":"227","endLine":356,"endColumn":59},{"ruleId":"228","severity":1,"message":"229","line":371,"column":25,"nodeType":"175","endLine":371,"endColumn":145},{"ruleId":"164","severity":1,"message":"230","line":19,"column":11,"nodeType":"166","messageId":"167","endLine":19,"endColumn":26},{"ruleId":"164","severity":1,"message":"231","line":31,"column":12,"nodeType":"166","messageId":"167","endLine":31,"endColumn":23},{"ruleId":"164","severity":1,"message":"202","line":53,"column":13,"nodeType":"166","messageId":"167","endLine":53,"endColumn":28},{"ruleId":"169","severity":1,"message":"222","line":123,"column":8,"nodeType":"171","endLine":123,"endColumn":10,"suggestions":"232"},{"ruleId":"164","severity":1,"message":"233","line":5,"column":9,"nodeType":"166","messageId":"167","endLine":5,"endColumn":27},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],"no-unused-vars","'first_time_done' is assigned a value but never used.","Identifier","unusedVar","'set_first_time_done' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'first_attempt'. Either include it or remove the dependency array.","ArrayExpression",["236"],"react/jsx-pascal-case","Imported JSX component Add_listing must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component My_listings must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component My_applications must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Apply_job must be in PascalCase or SCREAMING_SNAKE_CASE","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Router' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'makeStyles' is defined but never used.","'TextField' is defined but never used.","'Notification' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","'date_of_posting' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'set_success_messages_arr' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'props.email_id'. Either include it or remove the dependency array.",["237"],"'tmp_success_arr' is assigned a value but never used.","'useHistory' is defined but never used.","'ErrorNotification' is assigned a value but never used.","'SuccessNotification' is assigned a value but never used.","'user_obj' is assigned a value but never used.","'error_messages_arr' is assigned a value but never used.","'success_messages_arr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetch_data'. Either include it or remove the dependency array.",["238"],"'Alert' is defined but never used.","React Hook useEffect has a missing dependency: 'update_table_listings'. Either include it or remove the dependency array.",["239"],"'job_details' is assigned a value but never used.","'set_job_details' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'update_apps_master'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has a missing dependency: 'update_people_master'. Either include it or remove the dependency array.",["241"],"Imported JSX component Error_notification must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Success_notification must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect has a missing dependency: 'update_form_master'. Either include it or remove the dependency array.",["242"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'external_skills' is assigned a value but never used.","'master_data' is assigned a value but never used.",["243"],"'is_really_LoggedIn' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"256","fix":"258"},"Update the dependencies array to be: [first_attempt]",{"range":"259","text":"260"},"Update the dependencies array to be: [props.email_id]",{"range":"261","text":"262"},"Update the dependencies array to be: [fetch_data]",{"range":"263","text":"264"},"Update the dependencies array to be: [update_table_listings]",{"range":"265","text":"266"},"Update the dependencies array to be: [update_apps_master]",{"range":"267","text":"268"},"Update the dependencies array to be: [update_people_master]",{"range":"269","text":"270"},"Update the dependencies array to be: [update_form_master]",{"range":"271","text":"272"},{"range":"273","text":"272"},[3167,3169],"[first_attempt]",[9008,9010],"[props.email_id]",[3864,3866],"[fetch_data]",[10122,10124],"[update_table_listings]",[4823,4825],"[update_apps_master]",[11341,11343],"[update_people_master]",[5785,5787],"[update_form_master]",[4953,4955]]